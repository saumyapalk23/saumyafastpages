{
  
    
        "post0": {
            "title": "Hacks (Code Exercises) + CB FRQ",
            "content": "Data Types w/ Primitives Code . //Exercise 2: create a java program to find the first //non-repeating character in a string //example: &quot;alligator&quot; //output: i import java.util.*; public class Main { public static void main(String[] args) { String str = &quot;alligator&quot;; System.out.println(&quot;The string is: &quot; + str); for (int i = 0; i &lt; str.length(); i++) { boolean unique = true; for (int j = 0; j &lt; str.length(); j++) { if (i != j &amp;&amp; str.charAt(i) == str.charAt(j)) { unique = false; break; } } if (unique) { System.out.println(&quot;The 1st non-repeating is: &quot; + str.charAt(i)); break; } }} } Main.main(null); . The string is: alligator The 1st non-repeating is: i . - . public class NonRepeatingCharacterFinder { private String str; // instance variable to store the input string public NonRepeatingCharacterFinder(String str) { this.str = str; // constructor -- initializes instance variable with the input string } public char findFirstNonRepeating() { int[] charCount = new int[256]; // integer array of size 256 to store the frequency of each character in the string for (int i = 0; i &lt; str.length(); i++) { charCount[str.charAt(i)]++; // increment the count of the character at the i-th position in the string } for (int i = 0; i &lt; str.length(); i++) { if (charCount[str.charAt(i)] == 1) { // check if the count of the character at the i-th position in the string is equal to 1 return str.charAt(i); // return the first non-repeating character found } } return &#39; 0&#39;; // return null character if no non-repeating character is found } public static void main(String[] args) { String str = &quot;alligator&quot;; // example input string NonRepeatingCharacterFinder finder = new NonRepeatingCharacterFinder(str); // create an instance of the NonRepeatingCharacterFinder class with the input string char result = finder.findFirstNonRepeating(); // call the findFirstNonRepeating method to get the first non-repeating character System.out.println(&quot;The string is: &quot; + str); if (result == &#39; 0&#39;) { // check if no non-repeating character is found System.out.println(&quot;There is no non-repeating character in the string.&quot;); } else { System.out.println(&quot;The 1st non-repeating character is: &quot; + result); // print the first non-repeating character found } } } NonRepeatingCharacterFinder.main(null); . The string is: alligator The 1st non-repeating character is: i . Summary from ChatGPT . Here is a brief overview of the relationship between primitives, wrapper classes, and arrays in Java: | . Primitives: . byte: 8-bit integer short: 16-bit integer int: 32-bit integer long: 64-bit integer float: 32-bit floating point double: 64-bit floating point char: 16-bit Unicode character boolean: true or false value . Wrapper classes: . Byte: wraps byte Short: wraps short Integer: wraps int Long: wraps long Float: wraps float Double: wraps double Character: wraps char Boolean: wraps boolean Wrapper classes provide useful methods for working with primitives. For example, you can convert a string to an int using the Integer.parseInt() method. . Arrays: . Arrays can be declared for primitives or objects. For example: int[] numbers = new int[10]; creates an array of 10 int values. Integer[] numbers = new Integer[10]; creates an array of 10 Integer objects. Arrays can be used to store multiple values of the same type, and provide useful methods for working with collections of values. . Key Differences: Primitives w/ Wrapper Classes and Primitives w/o Wrapper Classes: . Primitives without wrapper classes are basic data types and are not objects. Wrapper classes, on the other hand, are objects and allow you to perform object-oriented operations on primitives. . | Primitives without wrapper classes are typically more efficient in terms of memory and performance than their wrapper class counterparts. This is because wrapper classes introduce additional overhead due to their object-oriented nature. . | Wrapper classes provide additional functionality that primitives without wrapper classes do not. For example, wrapper classes have methods that allow you to convert between primitive types, perform arithmetic operations, and more. . | Wrapper classes are required in situations where an object is expected, such as when working with collections or generics. Primitives without wrapper classes cannot be used in these situations. . | .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2023/03/11/hackstri3week1.html",
            "relUrl": "/jupyter/2023/03/11/hackstri3week1.html",
            "date": " • Mar 11, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Binary Addition Examples",
            "content": "import java.util.Scanner; public class binaryCode { public static void main(String[] args) { long binary1, binary2; int i = 0, remainder = 0; int[] sum = new int[20]; Scanner in = new Scanner(System.in); System.out.print(&quot;Input binary number one: &quot;); binary1 = in.nextLong(); System.out.print(&quot;Input second binary number: &quot;); binary2 = in.nextLong(); while (binary1 != 0 || binary2 != 0) { //insert while loop --i; System.out.print(&quot;Sum of two binary numbers: &quot;); while (i &gt;= 0) { System.out.print(sum[i--]); } System.out.print(&quot; n&quot;); } } . Reflection . import java.util.concurrent.atomic.AtomicInteger; public class PassByReference { public static void changeAtomicInteger(AtomicInteger n) { System.out.println(&quot;In changeAtomicInteger method&quot;); System.out.println(&quot; tBefore change: n = &quot; + n + // prints 5 &quot; hash code = &quot; + n.hashCode()); n.set(n.get() + 10); // at this point, we are clearly working with reference data type System.out.println(&quot; tAfter change: n = &quot; + n + // prints 15 &quot; hash code = &quot; + n.hashCode()); } public static void main(String[] args) { AtomicInteger n = new AtomicInteger(5); // unlike conventional wrapper class, this requires new System.out.println(&quot;Main method before changeAtomicInteger(n): n = &quot; + n + // prints 5 &quot; hash code = &quot; + n.hashCode()); changeAtomicInteger(n); System.out.println(&quot;Main method after changeAtomicInteger(n): n = &quot; + n + // now prints 15 &quot; hash code = &quot; + n.hashCode()); } } PassByReference.main(null); . Main method before changeAtomicInteger(n): n = 5 hash code = 1886428363 In changeAtomicInteger method Before change: n = 5 hash code = 1886428363 After change: n = 15 hash code = 1886428363 Main method after changeAtomicInteger(n): n = 15 hash code = 1886428363 . public class IntByReference { private int value; public IntByReference(Integer value) { this.value = value; } public String toString() { return (String.format(&quot;%d&quot;, this.value)); } public void swapToLowHighOrder(IntByReference i) { if (this.value &gt; i.value) { int tmp = this.value; this.value = i.value; i.value = tmp; } } public static void swapper(int n0, int n1) { IntByReference a = new IntByReference(n0); IntByReference b = new IntByReference(n1); System.out.println(&quot;Before: &quot; + a + &quot; &quot; + b); a.swapToLowHighOrder(b); // conditionally build swap method to change values of a, b System.out.println(&quot;After: &quot; + a + &quot; &quot; + b); System.out.println(); } public static void main(String[] ags) { IntByReference.swapper(21, 16); IntByReference.swapper(16, 21); IntByReference.swapper(16, -1); } } IntByReference.main(null); . Before: 21 16 After: 16 21 Before: 16 21 After: 16 21 Before: 16 -1 After: -1 16 .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/2023/03/07/see.html",
            "relUrl": "/2023/03/07/see.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Test Corrections/Blog (52 mc)",
            "content": "Score: 33/52 . Q1 2D array bounds error . Topic 8.1, 8.2 Consider the following code segment. int[][] anArray = new int[10][8]; for (int j = 0; j &lt; 8; j++) { for (int k = 0; k &lt; 10; k++) { anArray[j][k] = 5; } } The code segment causes an ArrayIndexOutOfBoundsException to be thrown. How many elements in anArray will be set to 5 before the exception is thrown? We answered 64 but this would not thrown an ArrayIndexOutOfBoundsException. Instead, 8 elements in anArray will be set to 5 before an exception is thrown since anArray has 8 columns, numbered 0 through 7, inclusive. . Q3 2D array with multi-way selection . 2B Topic 8.2 (Traversing 2D Arrays) Consider the following code segment. What are the contents of mat after the code segment has been executed? The correct answer would be D since the array created is 3 rows and 4 columns, not the other way around. . Q7 combine method . 2C Topic 2.7, 4.3 Consider the following method. /* Precondition: Strings one and two have the same length. / public static String combine(String one, String two) { String res = &quot;&quot;; for (int k = 0; k &lt; one.length(); k++) { if (one.substring(k, k + 1).equals(two.substring(k, k + 1))) { res += one.substring(k, k + 1); } else { res += &quot;0&quot;; } } return res; } What is returned as a result of the call combine(&quot;10110&quot;, &quot;01100&quot;) ? 00101 is incorrect since this would be the result if the method call was combine(&quot;10111&quot;, &quot;01101&quot;). Instead, the right answer is 00100 since the combine method compares corresponding substrings of length 1 from input strings one and two. If the substrings are the same, the substring is appended to res or else &quot;0&quot; is appended to res. . Q9 compSci substring . 2.C Topic 2.7 Consider the following code segment. String str = &quot;CompSci&quot;; System.out.println(str.substring(0, 3)); int num = str.length(); What is the value of num when the code segment is executed? str.length would give you the length of the string str, not the substring printed out so value of num is 7 not 3. (edited) 10:46 (here is my test corrections) . Q10 concat 0s and 8s . Consider the following code segment. . String str = &quot;0&quot;; str += str + 0 + 8; System.out.println(str); We answered that nothing is printed because you can&#39;t add ints to strings. However, the ints are interpreted as strings, so &quot;0008&quot; would be printed. . Q11 concat one two zee . Consider the following code segment. . int one = 1; int two = 2; String zee = &quot;Z&quot;; System.out.println(one + two + zee); What is printed as a result of executing the code segment? . We answered &quot;12Z&quot; because we thought the integers would be concatenated together much like strings are. However, the ints are actually added together, so the correct answer is &quot;3Z&quot; . Q12 . Create ArrayList of students, and add &quot;Alex&quot;, &quot;Bob&quot;, and &quot;Carl&quot; to them. Then, iterate over the array and set each value to alex. The print each value in the array. . We answered that nothing is printed because the first print statement will cause a runtime exception. However, in the first iteration, the set method will return the value that was originally at the index. During the first print statement, &quot;Alex Bob Carl&quot; will be printed. During the second print statement &quot;Alex Alex Alex&quot; will be printed. . Q13 containsArt method with 3 String parameters . Consider method which woould return true if at least one of the strings contains the substring art. Which would not work as intended. . We answered &quot;darkroom, cartoon, articulate&quot; because it doesn&#39;t end with art, meaning that the method will not pick it up. However, &quot;art&quot; doesn&#39;t have to be at the end of the string for it to be picked up. &quot;rattrapsimilartoday&quot; won&#39;t work because after concatenated, the program will detect an &quot;art&quot; between similar and today, even though none of the words actually contain &quot;art&quot; . Consider the following method, which is intended to return the number of columns in the two-dimensional array arr for which the sum of the elements in the column is greater than the parameter val. public int countCols(int[][] arr, int val) { int count = 0; for (int col = 0; col &lt; arr[0].length; col++) // Line 5 { int sum = 0; for (int[] row : col) // Line 8 { sum += row[col]; // Line 10 } if (sum &gt; val) { count++; } } return count; } . Question 14 above) . The countCols method does not work as intended. Which of the following changes should be made so the method works as intended? . Answer I chose answer option B which is incorrect since the enhanced for loop in line 8 is intended to traverse the rows of the two-dimensional array arr. Each row of arr is a one-dimensional array of int values, int[] row. The correct answer is C since two-dimensional arrays are stored as arrays of one-dimensional arrays. Line 8 is intended to assign to row, a one-dimensional array of int values, a single row of the two-dimensional array arr. The original version of line 8 attempts to assign a row of col, but col is not a two-dimensional array. . Question 15 . Consider the following method, which is intended to count the number of times the letter &quot;A&quot; appears in the string str. . public static int countA(String str) { int count = 0; while (str.length() &gt; 0) { int pos = str.indexOf(&quot;A&quot;); if (pos &gt;= 0) { count++; /* missing code */ } else { return count; } } return count; } . Which of the following should be used to replace / missing code / so that method countA will work as intended? . Answer I chose &quot;str = str.substring(pos);&quot; as my answer which is incorrect since this statement would result in an infinite loop for any value of str containing one or more occurrences of the letter &quot;A&quot;, since str, following the execution of this statement, would still include the letter &quot;A&quot;. The correct answer is &quot;str = str.substring(pos + 1);&quot; since in the while loop, the variable pos is assigned the position of the first occurrence of &quot;A&quot; in str. If pos is less than zero, there are no more occurrences of &quot;A&quot; and the value of count is returned. Otherwise, the value of count is incremented and str is updated by removing the initial characters of str, up to and including the occurrence of &quot;A&quot; that was last included in count. The statement str = str.substring(pos + 1) accomplishes the update by selecting characters of str starting one character after pos. . Question 29 . Consider the code segment below. . int a = 1988; int b = 1990; String claim = &quot; that the world’s athletes &quot; + &quot;competed in Olympic Games in &quot;; String s = &quot;It is &quot; + true + claim + a + &quot; but &quot; + false + claim + b + &quot;.&quot;; System.out.println(s); What, if anything, is printed when the code segment is executed? . Answer I chose E which is incorrect since the code actually does compile without error. The correct answer is that &quot;It is true that the world’s athletes competed in Olympic Games in 1988 but false that the world’s athletes competed in Olympic Games in 1990.&quot; since the + operator concatenates the String literals, boolean values, String variables, and int variables in the order that they appear. . Question 32 . In the following code segment, assume that the ArrayList data has been initialized to contain the Integer values [4, 3, 4, 5, 3, 4]. . int j = 0; while (j &lt; data.size() - 1) { if (data.get(j) &gt; data.get(j + 1)) { System.out.print(data.get(j + 1) + &quot; &quot;); } j++; } . What, if anything, is printed as a result of executing the code segment? . Answer I chose &quot;Nothing is printed because an IndexOutOfBoundsException occurs.&quot; as my answer which is incorrect since the code does actually run. The correct answer is &quot;3 3&quot; because the code segment iterates over the elements of data. Whenever an element is greater than the next element, the next element is printed. Because 4 is greater than the next element (3), 3 is printed. Because 5 is greater than the next element (3), another 3 is printed. . 35: . C is Correct. The code segment iterates over numbers from right-to-left and prints the values that are greater than their index. The element at index 3, which is 5, is greater than 3, so 3 is printed. The element at index 2, which is 4, is greater than 2, so 2 is printed. The element at index 1, which is 2, is greater than 1, so 1 is printed. The element at index 0, which is 0, is not greater than 0, so 0 is not printed. . 40 . Should be III only. C is correct. . 43 . C is Correct. The two parameter substring method returns the substring beginning at the first parameter and ending at the second parameter – 1. When word is assigned “compiler” and howFar is assigned 3, the value of word.substring(howFar + 1, word.length()) is “iler”. This is the substring of “compiler” beginning at 3 + 1 or 4 and ending at 8 – 1 or 7. The value of word.substring(0, howFar) is “com”. This is the substring of “compiler” beginning at 0 and ending at 2. The method returns “ilercom”. . 44 . D is Correct. The method assigns the shortest string that occurs in any element of arr between arr[n] and arr[arr.length - 1], inclusive, to result[n]. The shortest string found between arr[0] and arr[3] is &quot;of&quot;, so result[0] is assigned the value &quot;of&quot;. The shortest string found between arr[1] and arr[3] is also &quot;of&quot;, so result[1] is also assigned the value &quot;of&quot;. The same is true for the part of the array that begins at index 2 and ends at index 3, so result[2] is also assigned the value &quot;of&quot;. In the last iteration of the outer for loop, there are no values to consider after arr[3], so result[3] is assigned the value &quot;spring&quot;. . 45 . This would be the result if line 12 were executed once for each element of arr. . Line 12 is executed each time the variable sm is updated because a new smallest value is found. When j has the value 0, sm is updated for &quot;day&quot; and &quot;of&quot;. When j has the value 1, sm is updated for &quot;of&quot;. When j has the value 4, sm is updated for &quot;year&quot;. When j has any of the values 2, 3, or 5, sm is not updated. Line 12 is executed four times. . 48 . Option II is correct. The code segment uses an enhanced for loop to traverse the valueList array. The statement inside the loop calls the getNum method to access the num instance variable. . Option I is correct. The code segment uses a for loop to traverse the valueList array. The statement inside the loop calls the get method to access a Value object and then calls the getNum method to access the num instance variable. Option II is correct. The code segment uses an enhanced for loop to traverse the valueList array. The statement inside the loop calls the getNum method to access the num instance variable. Option III is incorrect. The code segment causes a compilation error because the getNum method must be called using the dot operator, not by passing the object reference as an argument. . 52 . This image would require the second set of nested loops to initialize row to val – 1, increment both row and col in each iteration inner loop (instead of row being decremented) and changing the condition on the inner loop to col &lt; 5 &amp;&amp; row &lt; 5. . The first set of nested for loops sets each element in board to “O”. The next for loop starts val at 0 and increments by 1 until val is 4, when val is 5 the loop terminates. When val is even, board is not updated, so nothing happens when val is 0. When val is 1, row is assigned 1 and col is assigned 0. The boolean condition in the while loop is true, so board[1][0] is assigned “X”. Then col is incremented to 1 and row is decremented to 0 and board[0][1] is assigned “X”. Then col is incremented to 2 and row is decremented to -1 and the while loop terminates. When val is 2, nothing changes about board. When val is 3, row is assigned 3 and col is assigned 0. The boolean condition in the while loop is true, so board[3][0] is assigned “X”. Then col is incremented to 1 and row is decremented to 2 and board[2][1] is assigned “X”. Then col is incremented to 2 and row is decremented to 1 and board[1][2] is assigned “X”. Then col is incremented to 3 and row is decremented to 0 and board[0][3] is assigned “X”. Finally, col is incremented to 4 and row is decremented to -1 and the while loop terminates. When val is 4, nothing changes about board. .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2023/01/31/52mc.html",
            "relUrl": "/jupyter/2023/01/31/52mc.html",
            "date": " • Jan 31, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Test Corrections/Blog (66 mc)",
            "content": "Score . 50/66 . Reflection . Reflection: . I think that I struggled mostly with timing, iteration, and DeMorgan&#39;s law, so I definitely have things I have to work on. | I also got 50/66, so there are definitely things I could work on to level up my score. | I plan to work on terminology and practice more iterative problems. I also think looking and reviewing class operations could be beneficial. | . Number 4 . Assume that a, b, and c are boolean variables that have been properly declared and initialized. Which of the following boolean expressions is equivalent to !(a &amp;&amp; b) || c ? . | Incorrect Answer: The expressions are not equivalent when a has the value true, b has the value false, and c has the value false. . | Correct Answer: By De Morgan’s laws, !(a &amp;&amp; b) is equivalent to !a || !b and the entire expression is equivalent to !a || !b || c. | . Number 6 . Consider the following code segment, which is intended to simulate a random process. The code is intended to set the value of the variable event to exactly one of the values 1, 2, or 3, depending on the probability of an event occurring. The value of event should be set to 1 if the probability is 70 percent or less. The value of event should be set to 2 if the probability is greater than 70 percent but no more than 80 percent. The value of event should be set to 3 if the probability is greater than 80 percent. The variable randomNumber is used to simulate the probability of the event occurring. | . int event = 0; . if (randomNumber &lt;= 0.70) . { . event = 1; . } . if (randomNumber &lt;= 0.80) . { . event = 2; . } . else . { . event = 3; . } . The code does not work as intended. Assume that the variable randomNumber has been properly declared and initialized. Which of the following initializations for randomNumber will demonstrate that the code segment will not work as intended? . Incorrect Answer: Incorrect. When randomNumber is 0.85 , the code segment works as intended because the expressions in the first if statement evaluates to false, and the expression in the if-else statement also evaluates to false. Therefore the code in the else clause is executed, and the value of event is correctly set to 3. | . Correct Answer: Correct. When randomNumber is 0.70, the value of event should be set to 1, but the code segment does not work as intended. In the first if statement, the expression randomNumber &lt;= 0.7 evaluates to true, and event is correctly set to 1. In the if-else statement, the expression randomNumber &lt;= 0.8 evaluates to true, and event is incorrectly set to 2. Therefore, this shows that the code does not work as intended. | . Number 7 . Consider the following class definitions. . public class A . { . private int al; public void methodA() { methodB(); // Statement I } . } . public class B extends A . { . public void methodB() { methodA(); // Statement II al = 0; // Statement III } . } . Which of the labeled statements in the methods shown above will cause a compile-time error? . Incorrect Answer: III only | Correct Answer: I and III I chose the wrong one on accident. | . Number 16 . Consider the following method, which is intended to return the number of columns in the two-dimensional array arr for which the sum of the elements in the column is greater than the parameter val. . public int countCols(int[][] arr, int val) . { . int count = 0; . for (int col = 0; col &lt; arr[0].length; col++) // Line 5 . { . int sum = 0; . for (int[] row : col) // Line 8 . { . sum += row[col]; // Line 10 . } . if (sum &gt; val) . { . count++; . } . } . return count; . } . The countCols method does not work as intended. Which of the following changes should be made so the method works as intended? . Incorrect Answer: Line 5 should be changed to for (int col = 0; col &lt; arr.length; col++). Incorrect. Line 5 is intended to iterate over all columns of arr and correctly assigns to col all values from 0 to the number of columns in arr, inclusive. . | Correct Answer: Two-dimensional arrays are stored as arrays of one-dimensional arrays. Line 8 is intended to assign to row, a one-dimensional array of int values, a single row of the two-dimensional array arr. The original version of line 8 attempts to assign a row of col, but col is not a two-dimensional array. . | . Number 18 . Consider the following code segment. . if (a &lt; b || c != d) . { . System.out.println(&quot;dog&quot;); . } . else . { . System.out.println(&quot;cat&quot;); . } . Assume that the int variables a, b, c, and d have been properly declared and initialized. Which of the following code segments produces the same output as the given code segment for all values of a, b, c, and d ? . Incorrect Answer: C is Incorrect. In order to apply De Morgan’s laws and negate the condition in the if statement in the given code segment, a and b should be compared using the &gt;= operator instead of the &gt; operator. As an example, if a, b, c, and d have the values 1, 1, 1, and 1, respectively, then the given code segment would print &quot;cat&quot; and this code segment would print &quot;dog&quot;. . | Correct Answer: E is Correct. Since the original expression prints &quot;dog&quot; when a &lt; b || c != d evaluates to true, an equivalent code segment would print &quot;cat&quot; when the negative of the expression, or !(a &lt; b || c != d), evaluates to true. Applying De Morgan’s laws produces the equivalent Boolean expression a &gt;= b &amp;&amp; c == d for the case when &quot;cat&quot; should be printed. . | . Number 19 . Assume that a, b, c, and d have been declared and initialized with int values. . !((a &gt;= b) &amp;&amp; !(c &lt; d)) . Which of the following is equivalent to the expression above? . Incorrect Answer: E is Incorrect. The expressions are not equivalent when a has the value 1, b has the value 2, c has the value 3, and d has the value 4. . Correct Answer: A is Correct. By De Morgan&#39;s laws, the given expression is equivalent to (a &lt; b) || (c &lt; d). . Number 24 . Consider the following method, which is intended to return true if 0 is found in its two-dimensional array parameter arr and false otherwise. The method does not work as intended. . public boolean findZero(int[][] arr) . { . for (int row = 0; row &lt;= arr.length; row++) . { . for (int col = 0; col &lt; arr[0].length; col++) . { . if (arr[row][col] == 0) . { . return true; . } . } . } . return false; . } . Which of the following values of arr could be used to show that the method does not work as intended? . Incorrect Answer: B is Incorrect. The comparison in the if statement will evaluate to true and the method will return true when row has the value 2 and col has the value 0. . | Correct Answer: D is Correct. The Boolean expression in the outer loop is row &lt;= arr.length instead of row &lt; arr.length. As a result, the method attempts to access a row outside the dimensions of the array when 0 is not found in the existing rows of the array. Any value of arr that does not contain 0 can be used to show that the method does not work as intended. . | . Number 36 . The question refer to the code from the GridWorld case study. . Consider the following declarations. . Actor a = new Actor(); . Bug b = new Bug(); . Rock r = new Rock(); . Critter c = new Critter(); . Consider the following lines of code. . Line 1: int dir1 = c.getDirection(); . Line 2: int dir2 = a.getDirection(); . Line 3: int dir3 = b.getDirection(); . Line 4: ArrayList rLoc = r.getMoveLocations();&lt;/p&gt; Line 5: ArrayList cLoc = c.getMoveLocations();&lt;/p&gt; Which of the lines of code above will cause a compile time error? . Incorrect Answer: Lines 2 and 3 only | Correct Answer: Line 4 only | . I chose the wrong one on accident. . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Number 37 . Consider the following code segment. . int num = / initial value not shown /; . boolean b1 = true; . if (num &gt; 0) . { . if (num &gt;= 100) . { . b1 = false; . } . } . else . { . if (num &gt;= -100) . { . b1 = false; . } . } . Which of the following statements assigns the same value to b2 as the code segment assigns to b1 for all values of num ? . Incorrect: C is Incorrect. The statement assigns a different value to b2 than the code segment assigns to b1 when num is between 0 and 100, exclusive, or when num is greater than 100. | . Correct: E is Correct. In the body of the first if clause in the code segment, b1 retains the value true if num is between 0 and 100, exclusive. In the body of the else clause, b1 retains the value true if num is less than -100. The statement assigns true to b2 if num is less than -100 or between 0 and 100, exclusive. | . &lt;/div&gt; .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2023/01/23/tc.html",
            "relUrl": "/jupyter/2023/01/23/tc.html",
            "date": " • Jan 23, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Unit 10 HW/Vocab Integration",
            "content": "HW . VOCAB INTEGRATION . The following are related to recursion in Java: . Creating a class | The main method | Standard methods such as toString(), equals(), and hashCode() Recursion is a programming technique in which a method calls itself to solve a problem. A recursive method must have a base case, which is a condition that stops the recursion, and a recursive case, which is a condition that makes the method call itself. | . For example, the following factorial() method calculates the factorial of a given number using recursion: . public class Factorial { public static void main(String[] args) { int n = 5; int factorial = factorial(n); System.out.println(&quot;The factorial of &quot; + n + &quot; is &quot; + factorial); } public static int factorial(int n) { if (n == 0) { // Base case: the factorial of 0 is 1 return 1; } else { // Recursive case: the factorial of n is n * the factorial of n - 1 return n * factorial(n - 1); } } } . In this example, the factorial() method has a base case for the n == 0 condition, where it returns 1, and a recursive case for the n &gt; 0 condition, where it calls itself with n - 1 as an argument. This allows the factorial() method to calculate the factorial of a given number by calling itself repeatedly with smaller and smaller numbers until it reaches the base case. . Casting, wrapper classes, concatenation, the Math class, compound boolean expressions, truth tables, De Morgan&#39;s law, comparing numbers, comparing strings, comparing objects, loops, constructor, accessor and mutator methods, static variables and methods, the this keyword, tester methods, inheritance, subclass constructor, method overloading, method overriding, abstract classes and methods, late binding of objects, polymorphism, and Big O notation are not directly related to recursion in Java. . //ex public class RecursiveFunctions { public static void main(String[] args) { int n = 12; int result = half(n); System.out.println(&quot;Half of &quot; + n + &quot; is &quot; + result); } public static int half(int n) { if (n == 0) { // Base case: the half of 0 is 0 return 0; } else { // Recursive case: the half of n is the half of n / 2 return half(n / 2); } } } . In this program, the RecursiveFunctions class contains the main method, which is the entry point of the program. The main method calls the half() method with the number 12 as an argument and prints out the result. . The half() method is a recursive method that calculates the half of a given number. It has a base case for the n == 0 condition, where it returns 0, and a recursive case for the n &gt; 0 condition, where it calls itself with n / 2 as an argument. This allows the half() method to calculate the half of a given number by calling itself repeatedly with smaller and smaller numbers until it reaches the base case. . The half() method is a standard method that is defined within the RecursiveFunctions class. It has a return type of int, which means it returns an integer value. The method uses . //2 base cases public class RecursiveFunctions { public static void main(String[] args) { int n = 12; int result = nextEven(n); System.out.println(&quot;The next even number after &quot; + n + &quot; is &quot; + result); } public static int nextEven(int n) { if (n == 1 || n == 2) { // Base case 1: the next even number after 1 is 2 // Base case 2: the next even number after 2 is 4 return n + 1; } else { // Recursive case: the next even number after n is the next even number after n - 2 return nextEven(n - 2); } } } . In this program, the RecursiveFunctions class contains the main method, which is the entry point of the program. The main method calls the nextEven() method with the number 12 as an argument and prints out the result. . The nextEven() method is a recursive method that calculates the next even number after a given number. It has two base cases: one for the n == 1 condition, where it returns 2, and one for the n == 2 condition, where it returns 4. It also has a recursive case for the n &gt; 2 condition, where it calls itself with n - 2 as an argument. This allows the nextEven() method to calculate the next even number after a given number by calling itself repeatedly with smaller and smaller numbers until it reaches one of the base cases. . The nextEven() method is a standard method that is defined within the RecursiveFunctions class. It has a return type of int, which means it returns an integer value. The method uses recursion to solve the problem of finding the next even number after a given number. . To use the nextEven() method in the main method, we simply call it with the desired number as an argument and store the result in a variable. We can then use the System.out.println() method to print out the result to the console. . //standard methods implemented (hashcode, etc.) public class RecursiveFunctions { public static void main(String[] args) { int n = 12; int result = nextEven(n); System.out.println(&quot;The next even number after &quot; + n + &quot; is &quot; + result); // Use the toString() method to convert the result to a string String resultString = Integer.toString(result); System.out.println(&quot;The string representation of the result is &quot; + resultString); // Use the equals() method to compare the result to another integer int otherNumber = 14; boolean isEqual = (result == otherNumber); System.out.println(&quot;The result is equal to &quot; + otherNumber + &quot;: &quot; + isEqual); // Use the hashCode() method to get the hash code of the result Integer resultInteger = new Integer(result); int resultHashCode = resultInteger.hashCode(); System.out.println(&quot;The hash code of the result is &quot; + resultHashCode); } public static int nextEven(int n) { if (n == 1 || n == 2) { // Base case 1: the next even number after 1 is 2 // Base case 2: the next even number after 2 is 4 return n + 1; } else { // Recursive case: the next even number after n is the next even number after n - 2 return nextEven(n - 2); } } } .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2022/12/14/unit10.html",
            "relUrl": "/jupyter/2022/12/14/unit10.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Extra Credit From Meeting (12/13)",
            "content": "Insight into Companies/Operations . Computer science skills are essential in today’s tech-driven world. One person with a background in computer science is Kathleen Beveridge. She was born in Vietnam and came to the United States in 1979. She studied finance in Spain and then moved to San Diego in 2004. She later earned a finance degree from the Bay Area and worked as an investment banker at Wells Fargo before joining Qualcomm. She has since switched to the biotech industry and has worked at three companies, all with mission statements involving using technology for the good of people. Another person with a background in computer science is Kris Porter. He studied electrical engineering at UCLA and received a master’s degree in electrical engineering from Cal State. He has worked at various companies, including NBC Universal, Qualcomm, and Twitter, where he worked on the timeline API and streaming media infrastructure for the 2022 Olympics. Both Beveridge and Porter have emphasized the importance of continuous learning in the tech industry. . Products and services in the tech industry can be life-changing. | Qualcomm chips are in 99% of phones, which shows the impact the company has on the market. | Beveridge is the director of marketing and commercial sales at Qualcomm and works with R&amp;D people. | She is the voice of sales and customers and ensures that the company’s products make sense for the market. | Kris Porter studied electrical engineering at UCLA and received a master’s degree in electrical engineering from Cal State. | He has worked at various companies, including NBC Universal, Qualcomm, and Twitter. | At Twitter, he worked on the timeline API and streaming media infrastructure for the 2022 Olympics. | Porter is an SRE (Site Reliability Engineer) and is responsible for making sure the company’s software is deployed in a secure environment with no risk of hacking. | He also has experience with DevOps, Linux operating systems, and research in embedded networks. | Porter’s work at Twitter involved adding data centers and transitioning from test APIs to the company’s proprietary graph UL. | . Agile Methodology . Agile methodology is a popular project management approach in the tech industry. | Different companies have their own variations of agile methodology. | At Qualcomm, 150 engineers interact and plan work for the quarter in big 2-3 day meetings. | Roadmaps for projects are based on project size and are created in these meetings. | Agile projects are typically not completed in 6-12 months, but rather in shorter sprints lasting 1-3 months. | Coordination with others is key in agile methodology. | Agile methodology allows for more flexibility and adaptability in project management. | It is widely used in the tech industry to manage complex projects. | . Dynamics in Tech Companies . Machine learning is widely used at Qualcomm, with the company utilizing Python libraries and Intenser Flow. | Experiments are run to test and improve machine learning models. | Qualcomm hosts a large number of repositories on GitLab and GitHub, with over 100,000 repositories in use. | There are concerns about downloads and access to these repositories. | Qualcomm uses analytics infrastructure to predict when repositories should be archived. | Data scientists at Qualcomm use machine learning to predict things like weather and crop yields. | Machine learning is a valuable tool in the tech industry, allowing companies to analyze large amounts of data and make predictions. | Qualcomm’s use of machine learning shows the importance of this technology in the industry. | The company’s analytics infrastructure helps ensure that its machine learning models are effective and efficient. | . Advice &amp; Main Takeaways . Data scientists use their skills to predict weather and good/bad harvests. | Continuous learning is the most important skill in the tech industry. | Learning how to learn is crucial for success in the tech industry. | The only risk is not learning – adaptability is key to staying ahead in the tech industry. | Listen to the requirements of a project and adjust your approach accordingly. | Overcoming challenges, such as those faced by serial acquirers at Qualcomm, requires critical thinking and problem-solving skills. | Coding is a way of thinking that involves critical thinking, problem-solving, strategizing, and dissecting issues. | Coding is a valuable skill that can help you develop critical thinking and problem-solving abilities. | . Connections . Use resume for internships | Ask local/smaller company for highschool interns | Focus on continuous learning and developing the ability to learn new things. | Don&#39;t be overly concerned about things you read in the news – focus on your own learning and development. | The more your life depends on others and the news, the more restricted you may feel. Important to identify your uniqueness. | . | Embrace adaptability and be willing to learn new things in order to stay ahead in the tech industry. | Listen carefully to the requirements of a project and adjust your approach accordingly. | Be able to take the fall. Especially considering competition in colleges and highschool itself, it is imperative that you are able to change and adapt when necessary. | . | Overcome challenges by using critical thinking and problem-solving skills. | Be prepared for interviews, where you may be tested on your ability to write code that compiles and runs without errors. | Be prepared and able to converse with others properly – make sure you’re headstrong for the things that may be thrown at you. These can include firings, setbacks, etc. | . | Negotiate with your employer to find a work-life balance that works for you. | When coding in class, be resourceful. Ask questions. | . | Walk through your thought process and explain why you reached a particular conclusion. | Debug both in code but also in the decisions you make daily. It can be especially useful in order to find errors in the way you execute things in general. | . | .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/markdown/2022/12/13/extracred2.html",
            "relUrl": "/markdown/2022/12/13/extracred2.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Unit 9 HW/Vocab Integration",
            "content": "HW . import java.time.LocalDate; import java.time.Period; import java.time.ZoneId; import java.util.Date; import java.util.HashMap; import java.util.Map; public class Person { public String name; public String birthday; public Person (String name, String birthday){ this.name = name; this.birthday = birthday; } public String getName(){ return name; } public int getAge() { if (this.birthday != null){ } return -1; } @Override public String toString() { return (&quot;Person: &quot; + &quot; name: &quot; + name + &quot; birthday: &quot; + birthday); } public class Student extends Person { private int grade; private double gpa; private String job; public Student (String name, String birthday, int grade, double gpa, String job) { super(name, birthday); this.grade = grade; this.gpa = gpa; this.job = job; } public double getGPA(){ return gpa; } public String getJob(){ return job; } public int getGrade(){ return grade; } @Override public String toString() { return (&quot;Student -- &quot; + &quot;name: &quot; + name + &quot; birthday: &quot; + birthday + &quot; grade: &quot; + grade + &quot; gpa: &quot; + gpa + &quot; job: &quot; + job); } }} public class Teacher extends Person { private int yrsExperience; private String subject; public Teacher (String name, String birthday, int yrsExperience, String subject) { super(name, birthday); this.yrsExperience = yrsExperience; this.subject = subject; } public int getYrsExp(){ return yrsExperience; } public String getSubject(){ return subject; } @Override public String toString() { return (&quot;Teacher -- &quot; + &quot;name: &quot; + name + &quot; birthday: &quot; + birthday + &quot; Years of Experience: &quot; + yrsExperience + &quot; Subject: &quot; + subject); } } Person Saumya = new Person(&quot;Saumya&quot;, &quot;2006&quot;); System.out.println(Saumya.toString()); Person Andrea = new Student(&quot;Andrea&quot;, &quot;2006&quot;, 11, 4.0, &quot;Math Tutor&quot;); System.out.println(Andrea.toString()); Person Tom = new Teacher(&quot;Tom&quot;, &quot;1975&quot;, 16, &quot;Earth Science&quot;); System.out.println(Tom.toString()); . Person: name: Saumya birthday: 2006 . | Person Andrea = new Student(&#34;Andrea&#34;, &#34;2006&#34;, 11, 4.0, &#34;Math Tutor&#34;); cannot find symbol symbol: class Student . public class WorldCup { public String game; public String team1; public String team2; public int score; public WorldCup (String game, String team1, String team2, int score){ this.game = game; this.team1=team1; this.team2=team2; this.score=score; } public String getTeam1(){ return team1; } public String getTeam2(){ return team2; } public void score() { this.score += 1; } public void stats(){ System.out.println(&quot;&quot;); } public void printInfo() { System.out.println(&quot;Team game: &quot; + this.game); System.out.println(&quot;Team 1: &quot; + this.team1); System.out.println(&quot;Team 2: &quot; + this.team2); System.out.println(&quot;Score: &quot; + this.score); stats(); } } public class Portugal extends WorldCup { public Portugal(String game, String team1, String team2, int score){ super(game, team1, team2, score); } public void score() { this.score += 1; } public void stats(){ System.out.println(&quot;Portugal pass accuracy: 71%&quot;); } } public class Morocco extends WorldCup { public Morocco(String game, String team1, String team2, int score){ super(game, team1, team2, score); } public void score() { this.score += 1; } public void stats(){ System.out.println(&quot;Morocco pass accuracy: 85%&quot;); } } WorldCup WorldCup = new WorldCup(&quot;Game 1&quot;,&quot;Portugal&quot;, &quot;Morocco&quot;, 1); WorldCup Portugal = new Portugal(&quot;Game 1&quot;, &quot;Portugal&quot;, &quot;Morocco&quot;, 0); WorldCup Morocco = new Morocco(&quot;Game 1&quot;, &quot;Portugal&quot;, &quot;Morocco&quot;, 1); WorldCup.printInfo(); Portugal.printInfo(); Morocco.printInfo(); . Team game: Game 1 Team 1: Portugal Team 2: Morocco Score: 1 Team game: Game 1 Team 1: Portugal Team 2: Morocco Score: 0 Portugal pass accuracy: 71% Team game: Game 1 Team 1: Portugal Team 2: Morocco Score: 1 Morocco pass accuracy: 85% . VOCAB INTEGRATION . The following are used in inheritance in Java: . The extends keyword to create a subclass that inherits from a superclass . The super keyword to call a superclass constructor or method from a subclass . Overriding a method, which involves defining a method in a subclass that has the same signature (name and parameters) as a method in the superclass . Polymorphism, which allows an object of a subclass to be treated as an object of the superclass . Casting, wrapper classes, concatenation, the Math class, compound boolean expressions, truth tables, De Morgan&#39;s law, comparing numbers, comparing strings, comparing objects, loops, creating a class, constructor, accessor and mutator methods, static variables and methods, the this keyword, the main method, abstract classes and methods, and standard methods such as toString(), equals(), and hashCode() are not directly related to inheritance in Java. . Big O notation is a measure of the efficiency of an algorithm, not a feature of the Java language. . public class WorldCup { public static void main(String[] args) { Team argentina = new Team(&quot;Argentina&quot;, &quot;Jorge Sampaoli&quot;); Team brazil = new Team(&quot;Brazil&quot;, &quot;Tite&quot;); Team germany = new Team(&quot;Germany&quot;, &quot;Joachim Low&quot;); argentina.displayTeamInfo(); brazil.displayTeamInfo(); germany.displayTeamInfo(); argentina.playGame(); brazil.playGame(); germany.playGame(); argentina.displayTeamInfo(); brazil.displayTeamInfo(); germany.displayTeamInfo(); } } class Team { protected String name; protected String coach; protected int wins; public Team(String name, String coach) { this.name = name; this.coach = coach; this.wins = 0; } public void displayTeamInfo() { System.out.println(&quot;Team: &quot; + this.name); System.out.println(&quot;Coach: &quot; + this.coach); System.out.println(&quot;Wins: &quot; + this.wins); } public void playGame() { // Simulate a game and increase the number of wins by 1 if the team wins this.wins++; } } . In this program, the Team class represents a team participating in the World Cup. It has three instance variables: name, coach, and wins, which hold the name of the team, the name of the coach, and the number of games the team has won, respectively. The Team class also has a constructor that initializes these instance variables and a displayTeamInfo() method that prints out the team&#39;s information. . To create a subclass that represents a specific team, we can use the extends keyword. For example, the following Argentina class extends the Team class and adds a specific logo for the team: . class Argentina extends Team { private String logo = &quot;https://upload.wikimedia.org/wikipedia/en/thumb/1/1a/Argentina_national_football_team_logo.svg/1200px-Argentina_national_football_team_logo.svg.png&quot;; public Argentina(String name, String coach) { super(name, coach); } public void displayTeamInfo() { super.displayTeamInfo(); System.out.println(&quot;Logo: &quot; + this.logo); } } . This Argentina class uses the super keyword to call the Team class&#39; constructor and passes it the name and coach arguments. It also overrides the displayTeamInfo() method from the Team class and adds the team&#39;s logo to the information displayed. . To use the Argentina class in the main method of the WorldCup class, we can create an Argentina object and call its methods just like we would call the methods of any other Team object. For example, we can create an Argentina object like this: . Team argentina = new Argentina(&quot;Argentina&quot;, &quot;Jorge Sampaoli&quot;); . And then we can call its methods like this: . Team argentina = new Argentina(&quot;Argentina&quot;, &quot;Jorge Sampaoli&quot;); argentina.displayTeamInfo(); argentina.playGame(); . Team: Argentina Coach: Jorge Sampaoli Wins: 0 Logo: https://upload.wikimedia.org/wikipedia/en/thumb/1/1a/Argentina_national_football_team_logo.svg/1200px-Argentina_national_football_team_logo.svg.png . Because the Argentina class extends the Team class, an Argentina object is considered to be a Team object as well. This allows us to use polymorphism, where we can treat an object of a subclass as an object of the superclass. For example, we can create a Team object that refers to an Argentina object like this: . Team team = new Argentina(&quot;Argentina&quot;, &quot;Jorge Sampaoli&quot;); . Then, when we call the displayTeamInfo() method on the team object, it will call the overridden displayTeamInfo() method in the Argentina class, which will display the team&#39;s information as well as the team&#39;s logo. .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2022/12/12/unit9hw.html",
            "relUrl": "/jupyter/2022/12/12/unit9hw.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "frq4",
            "content": "// package com.nighthawk.spring_portfolio.mvc.lightboard; // import lombok.Data; import java.lang.Math; // @Data // Annotations to simplify writing code (ie constructors, setters) public class LightBoard { // private Light[][] lights; private boolean [][] lights; //part a /* Initialize LightBoard and Lights */ public LightBoard(int numRows, int numCols) { lights = new boolean [numRows][numCols]; // 2D array nested loops, used for initialization for (int r = 0; r &lt; lights.length; r++) { for (int c = 0; c &lt; lights[r].length; c++) { if (Math.random() &lt;0.4){ lights[r][c]=true; } else{ lights[r][c]=false; } } } } } public boolean evaluateLight(int row, int col) { //check light is turned on int lightOn =0; if (lights[row][col]==true) for(int r=0; r&lt;lights.length;r++) { if(lights[r][col]==true) { lightOn++; } } if (lightOn % 2 == 0){ if(lights[row][col]==0){ return false; } } else{ return true; } if (lightOn % 3 == 0) { return true; } else { return false; } // return lights[row][col]; } //off for false // create and display LightBoard public void tester() { lights[0][0]=true; lights[0][1]=true; lights[0][2]=false;lights[0][3]=true; lights[0][4]=true; lights[1][0]=true; lights[1][1]=false;lights[1][2]=false;lights[1][3]=true; lights[1][4]=false; lights[2][0]=true; lights[2][1]=false;lights[2][2]=false;lights[2][3]=true; lights[2][4]=true; lights[3][0]=true; lights[3][1]=false;lights[3][2]=false;lights[3][3]=false;lights[3][4]=true; lights[4][0]=true; lights[4][1]=false;lights[4][2]=false;lights[4][3]=false;lights[4][4]=true; lights[5][0]=true; lights[5][1]=true; lights[5][2]=false;lights[5][3]=true; lights[5][4]=true; lights[6][0]=false;lights[6][1]=false;lights[6][2]=false;lights[6][3]=false;lights[6][4]=false; } . LightBoard lightboard = new LightBoard(5, 5); System.out.println(lightboard.evaluateLight(0,1)); System.out.println(lightboard.evaluateLight(3,1)); System.out.println(lightboard.evaluateLight(0,2)); . true true false .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2022/12/12/frq4.html",
            "relUrl": "/jupyter/2022/12/12/frq4.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Photo Carousel",
            "content": "| Menu | Calculator | Snake Game | Photo Carousel | . 1 heh 2 yeehaw 3 yessir 4 lolz 5 awsum 6 lolol 7 hopefully ppl dont see this 8 yuppy 9 yaass 10 ayyy 11 wowza 12 yawzers 13 kweens &#10094; &#10095; .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/frontend12/PhotoCarousel",
            "relUrl": "/frontend12/PhotoCarousel",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Arrays Unit 6/Vocab Integration",
            "content": "HW . swaps first/last elements . import java.util.Arrays; public class unit6hw { public static void main(String[] args) {}} int[] array1 = {92, 38, 23, 90, 12, 54, 72}; System.out.println(&quot;Original Array: &quot;+Arrays.toString(array1)); int x = array1[0]; array1[0] = array1[array1.length-1]; array1[array1.length-1] = x; System.out.println(&quot;New array: &quot;+Arrays.toString(array1)); //swaps first/last elements . Original Array: [92, 38, 23, 90, 12, 54, 72] New array: [72, 38, 23, 90, 12, 54, 92] . all even values to 0 . //all even values to 0 import java.util.Arrays; public class unit6hw { public static void main(String[] args) {}} int[] array1; array1 = new int[7]; int array1[] = {92, 38, 23, 90, 65, 54, 72, 99}; // const int size = 7; // int array1[size] = { 1,2,3,4,5,6,7 }; for (int i = 0; i &lt; array1.length; i++) { if (array1[i] % 2 == 0) array1[i] = 0; System.out.println(&quot;New array: &quot;+Arrays.toString(array1)); } . New array: [0, 38, 23, 90, 65, 54, 72, 99] New array: [0, 0, 23, 90, 65, 54, 72, 99] New array: [0, 0, 23, 90, 65, 54, 72, 99] New array: [0, 0, 23, 0, 65, 54, 72, 99] New array: [0, 0, 23, 0, 65, 54, 72, 99] New array: [0, 0, 23, 0, 65, 0, 72, 99] New array: [0, 0, 23, 0, 65, 0, 0, 99] New array: [0, 0, 23, 0, 65, 0, 0, 99] . VOCAB IMPLEMENTATION . The following items are used by arrays and arraylists: . Casting, specifically for truncating or rounding: Arrays and arraylists may use casting for truncating or rounding values. For example, if an array or arraylist contains floating-point numbers, they may be cast to integers using the &#39;(int)&#39; syntax to round or truncate the values. . | Wrapper classes, why wrap int, double. Show examples: Arrays and arraylists may use wrapper classes to store primitive data types such as &#39;int&#39; and &#39;double&#39; in objects. Wrapper classes allow these primitive data types to be treated as objects, which can be useful for certain operations and data structures. For example, an array of &#39;int&#39; values could be wrapped in the &#39;Integer&#39; wrapper class to create an array of &#39;Integer&#39; objects. . | Math class, specifically Random usage: The &#39;Math&#39; class, which contains various mathematical functions and constants, may be used by arrays and arraylists. For example, the &#39;random&#39; method of the &#39;Math&#39; class can be used to generate random numbers, which could be used to initialize the values of an array or arraylist. . | for loop, enhanced for loop: Arrays and arraylists may be iterated over using a &#39;for&#39; loop or an &#39;enhanced for&#39; loop. These loops allow the programmer to easily access and manipulate each element in the array or arraylist in turn. . | while loop versus do while loop: Arrays and arraylists may be iterated over using a &#39;while&#39; loop or a &#39;do-while&#39; loop. These loops are similar to &#39;for&#39; loops, but offer more flexibility in terms of controlling the iteration. A &#39;while&#39; loop will only execute its body if a certain condition is met, whereas a &#39;do-while&#39; loop will always execute its body at least once. . | nested loops: Arrays and arraylists may be nested within other loops, allowing the programmer to perform complex operations on the data. For example, a &#39;for&#39; loop could be used to iterate over an array of arrays, allowing the programmer to access and manipulate the elements of each inner array in turn. . | Show use case of access modifiers: Public, Private, Protected: Arrays and arraylists may be declared with access modifiers such as &#39;public&#39;, &#39;private&#39;, and &#39;protected&#39;. These modifiers control the visibility and accessibility of the array or arraylist within the program. For example, a &#39;private&#39; array or arraylist can only be accessed within the class in which it is declared, whereas a &#39;public&#39; array or arraylist can be accessed by any other class. . | Static methods, Class methods: Arrays and arraylists may be declared as static or class methods. Static methods are methods that belong to the class itself, rather than to individual instances of the class. This means that they can be called without creating an instance of the class, and are often used for utility functions. Class methods are similar to static methods, but can be overridden by subclasses. . | this Keyword: The &#39;this&#39; keyword may be used in the context of arrays and arraylists to refer to the current instance of the class. This can be useful when dealing with multiple variables with the same name, or when calling methods on the current instance of the class. . | main method, tester methods: Arrays and arraylists may be tested using a &#39;main&#39; method or other tester methods. The &#39;main&#39; method is the entry point for a Java program, and is typically used to test the functionality of the program. Tester methods are similar to the &#39;main&#39; method, but are used to test specific components or features of the program. . | Inheritance . | . import java.util.Arrays; import java.util.Random; public class ArrayExample { private static int[] values; private static Integer[] wrapped; public static void main(String[] args) { // Initialize the array with random values values = new int[10]; Random rand = new Random(); for (int i = 0; i &lt; values.length; i++) { values[i] = rand.nextInt(100); } // Print the array System.out.println(&quot;Original array: &quot; + Arrays.toString(values)); // Truncate and round the array elements processArray(); // Print the updated array System.out.println(&quot;Truncated and rounded array: &quot; + Arrays.toString(values)); // Use a wrapper class to store the array elements as objects wrapped(); // Print the squared array System.out.println(&quot;Squared array: &quot; + Arrays.toString(wrapped)); // Use a while loop to iterate over the array int i = 0; while (i &lt; values.length) { // Print the current element System.out.println(&quot;Element at index &quot; + i + &quot;: &quot; + wrapped[i]); i++; } } public static void processArray() { for (int i = 0; i &lt; values.length; i++) { // Truncate the element by casting it to an integer int truncated = (int) values[i]; // Round the element by adding 0.5 and casting to an integer int rounded = (int) (values[i] + 0.5); // Update the array with the truncated and rounded values values[i] = truncated; values[i] = rounded; } } public static void wrapped() { wrapped = new Integer[values.length]; for (int i = 0; i &lt; values.length; i++) { // Wrap the element in an Integer object wrapped[i] = new Integer(values[i]); } // Use the Math class to square the array elements for (int i = 0; i &lt; values.length; i++) { // Square the element using the Math.pow method wrapped[i] = (int) Math.pow(wrapped[i], 2); } } } public static void testArrayExample() { // Create an array of integers int[] arr = new int[] {3, 4, 90, 5, 6, 7}; ArrayProcessor processor = new ArrayProcessor(arr); // Truncate and round the elements of the array processor.processArray(); processor.wrapped(); // Print the updated array System.out.println(&quot;Updated array: &quot; + Arrays.toString(arr)); System.out.println(&quot;Squared array: &quot; + Arrays.toString(wrapped)); System.out.println(&quot;Element at index &quot; + i + &quot;: &quot; + wrapped[i]); System.out.println(&quot;Truncated and rounded array: &quot; + Arrays.toString(values)); } . import java.util.Arrays; import java.util.Random; // Subclass to process array elements public static class ArrayProcessor { private int[] array; // Constructor public ArrayProcessor(int[] arr) { this.array = arr; } // Method to truncate and round the array elements public void processArray() { for (int i = 0; i &lt; this.array.length; i++) { // Truncate the element by casting it to an integer int truncated = (int) this.array[i]; // Round the element by adding 0.5 and casting to an integer int rounded = (int) (this.array[i] + 0.5); // Update the array with the truncated and rounded values this.array[i] = truncated; this.array[i] = rounded; } } } // Tester method to test the ArrayProcessor class public static void testArrayProcessor() {} // Create an array of integers int[] arr = new int[] {1, 2, 3, 4, 5, 6}; // Create an instance of the ArrayProcessor class ArrayProcessor processor = new ArrayProcessor(arr); // Truncate and round the elements of the array processor.processArray(); // Print the updated array System.out.println(&quot;Updated array: &quot; + Arrays.toString(arr)); . Updated array: [1, 2, 3, 4, 5, 6] . What arrays and arraylists don&#39;t include: . Casting, specifically for division: Arrays and arraylists do not use casting for division. Division is performed using the &#39;/&#39; operator, and the type of the result depends on the types of the operands. . | Concatenation, explain or illustrate rules on mixed type concatenation: Concatenation is not used by arrays or arraylists. Instead, these data structures store and manipulate individual elements of a specific type. . | Compound Boolean expression: A compound boolean expression is a boolean expression that combines two or more individual boolean expressions using logical operators such as &#39;and&#39; and &#39;or&#39;. This is not directly used by arrays or arraylists, although they may be used in a boolean expression to check the value of an array or arraylist element. . | Truth tables: Truth tables are not used by arrays or arraylists. Truth tables are used to show the logical relationships between different boolean expressions. . | De Morgan&#39;s Law: De Morgan&#39;s Law is not used by arrays or arraylists. It is a fundamental theorem of logic that describes the relationship between the logical operators &#39;and&#39; and &#39;or&#39; and their negations &#39;not and&#39; and &#39;not or&#39;. . | Comparing numbers: Comparing numbers is not used by arrays or arraylists. Arrays and arraylists store and manipulate individual elements, and the comparison of these elements is performed using the standard comparison operators such as &#39;==&#39;, &#39;&gt;&#39;, and &#39;&lt;&#39;. . | Comparing strings: Comparing strings is not used by arrays or arraylists. Like numbers, arrays and arraylists store and manipulate individual elements, and the comparison of these elements is performed using the standard comparison operators such as &#39;==&#39;, &#39;&gt;&#39;, and &#39;&lt;&#39;. . | Comparing objects: Comparing objects is not used by arrays or arraylists. Objects in Java are compared using the &#39;equals&#39; method, which is defined by the &#39;Object&#39; class and can be overridden by subclasses to provide custom comparison behavior. . | Arrays and arraylists do not typically contain objects, and even if they did, the &#39;equals&#39; method would not be used to compare them. . | Creating a class, describe naming conventions: Creating a class is not used by arrays or arraylists. In Java, arrays and arraylists are implemented using existing classes, and do not require the creation of new classes. Naming conventions refer to the rules and guidelines for naming variables, methods, and other entities in a program, and are not directly related to arrays or arraylists. . | Constructor, describe why there is no return: A constructor is not used by arrays or arraylists. A constructor is a special method that is used to create and initialize an instance of a class. Unlike other methods, constructors do not have a return type, because they do not return a value. Instead, they return a new instance of the class. . | Accessor methods, relationship to getter: Accessor methods, also known as getter methods, are not used by arrays or arraylists. Getter methods are methods that are used to retrieve the value of an object&#39;s field. They are typically used in classes to provide a way for other objects to access the object&#39;s internal state without directly accessing its fields. Arrays and arraylists do not have fields, and do not use getter methods. . | Mutator methods, relationship to setter, describe void return type: Mutator methods, also known as setter methods, are not used by arrays or arraylists. Setter methods are methods that are used to modify the value of an object&#39;s field. They are typically used in classes to provide a way . | .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2022/12/06/unit6.html",
            "relUrl": "/jupyter/2022/12/06/unit6.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "2D ARRAYS Unit 8/Vocab Integration",
            "content": "HW . import java.util.Scanner; //Create a class for 2D array learning public class Array{ public int[][] numbers = {{1,3,5},{7,9,11},{13,15,18},{21,23,25}}; //method1 public void numArray() { System.out.println(&quot; nArray: &quot;); int[][] numbers = {{1,3,5},{7,9,11},{13,15,18},{21,23,25}}; for(int i = 0;i&lt;numbers.length;i++){ for(int j = 0; j &lt; numbers[i].length;j++){ System.out.print(numbers[i][j]+&quot; &quot;); } System.out.println(); } } public void reversedArray(){ System.out.println(&quot; nReversed 2dArray: &quot;); for(int i=numbers.length-1;i&gt;=0;i--){ for(int j = 0; j &lt;numbers[i].length;j++){ System.out.print(numbers[i][j]+&quot; &quot;); } System.out.println(); } } public void inputValue(){ int[][] numbers = {{1,3,5},{7,9,11},{13,15,18},{21,23,25}}; System.out.println(&quot; n&quot;); Scanner scanner = new Scanner(System.in); { System.out.print(&quot;Row: &quot;); int inputRow = scanner.nextInt(); System.out.println(inputRow); System.out.print(&quot;Column: &quot;); int inputColumn = scanner.nextInt(); System.out.println(inputColumn); System.out.println(&quot;Row, Column: &quot; + inputRow + &quot;, &quot; + inputColumn); // System.out.println(&quot; n&quot;); System.out.println(numbers[inputRow][inputColumn]); } System.out.println(); } public void findProd(){ int[][] numbers = {{1,3,5},{7,9,11},{13,15,18},{21,23,25}}; // System.out.println(&quot; n&quot;); int sumofProd = 0; for(int i = 0; i&lt;numbers.length; i++) { int product = 1; for(int j = 0; j &lt; numbers[i].length; j++) { product = product * numbers[i][j]; sumofProd += product; } } System.out.println(&quot;product sum: &quot; + sumofProd); } } . Array twoD = new Array(); twoD.numArray(); twoD.reversedArray(); twoD.inputValue(); twoD.findProd(); . Array: 1 3 5 7 9 11 13 15 18 21 23 25 Reversed 2dArray: 21 23 25 13 15 18 7 9 11 1 3 5 Row: 1 Column: 2 Row, Column: 1, 2 11 product sum: 17079 . VOCAB IMPLEMENTATION . The following are examples of some of the items that can be found in 2D arrays: . Casting, specifically for division: In a 2D array, you can use casting to convert the elements in the array from one data type to another. For example, if you have a 2D array of double values, you can use casting to convert them to int values and then perform integer division on the elements. . Wrapper classes: Wrapper classes, such as Integer and Double, are used to store primitive data types (such as int and double) as objects. This can be useful in a 2D array when you want to store elements of different data types in the same array. . Concatenation: Concatenation is the process of combining two or more strings into a single string. In a 2D array, you can use concatenation to combine the elements of the array into a single string. For example, if you have a 2D array of strings, you can use concatenation to create a single string that contains all the elements of the array. . Math class: The Math class in Java provides a variety of methods for performing mathematical operations, such as trigonometric functions, logarithms, and random number generation. In a 2D array, you can use the Math class to generate random numbers and perform other mathematical operations on the elements of the array. . Compound boolean expressions: A compound boolean expression is a logical expression that consists of two or more sub-expressions joined by logical operators, such as AND and OR. In a 2D array, you can use compound boolean expressions to perform complex operations on the elements of the array, such as searching for a specific element or sorting the array. . Truth tables: A truth table is a mathematical table that shows the truth values of a logical expression for all possible combinations of its variables. In a 2D array, you can use truth tables to evaluate the truth values of complex expressions involving the elements of the array. . Comparing numbers: In a 2D array, you can use comparison operators, such as &gt;, &lt;, and ==, to compare the elements of the array to each other or to a specified value. For example, you can use a for loop to iterate over the elements of the array and compare each element to a specified threshold value to determine whether it is greater than, less than, or equal to the threshold. . Comparing strings: In a 2D array, you can use the equals() method to compare the elements of the array to each other or to a specified string. For example, you can use a for loop to iterate over the elements of the array and compare each element to a specified search string to determine whether they are equal. . Comparing objects: In a 2D array, you can use the compareTo() method to compare the elements of the array to each other or to a specified object. For example, you can use a for loop to iterate over the elements of the array and compare each element to a specified target object to determine whether they are equal or whether one is greater than or less than the other. . for loops: In a 2D array, you can use a for loop to iterate over the elements of the array and perform operations on them. For example, you can use a for loop to search for a specific element in the array or to sort the elements of the array in ascending or descending order. . while loops: In a 2D array, you can use a while loop to iterate over the elements of the array and perform operations on them. For example, you can use a while loop to search for a specific element in the array or to sort the elements of the array in ascending or descending order. . Nested loops: In a 2D array, you can use nested loops to iterate over the elements of the array and perform operations on them. For example, you can use a nested loop to search for a specific element in the array or to sort the elements of the array in ascending or descending order. . Classes: In a 2D array, you can use a class to define the data type of the elements of the array. For example, you can create a Point class to represent a point in 2D space, and then create a 2D array of Point objects to store a set of points. . De Morgan&#39;s law: In a 2D array, you can use De Morgan&#39;s law to manipulate logical expressions involving the elements of the array. For example, if you have a 2D array of boolean values, you can use De Morgan&#39;s law to convert an expression involving the AND and OR operators into an equivalent expression involving the NOT and XOR operators. . public class DeMorganExample { public static void main(String[] args) { // Create a 2D array of boolean values boolean[][] array = new boolean[][] { {true, false, true}, {false, true, false}, {true, false, true} }; // Use De Morgan&#39;s law to convert an expression involving the AND and OR operators // into an equivalent expression involving the NOT and XOR operators for (int i = 0; i &lt; array.length; i++) { for (int j = 0; j &lt; array[i].length; j++) { boolean a = array[i][j]; boolean b = array[i][j + 1]; boolean c = array[i + 1][j]; boolean d = array[i + 1][j + 1]; boolean e = !(a || b) &amp;&amp; !(c || d); } } } } . public class Example { public static void main(String[] args) { // Create a 2D array of strings String[][] array = new String[][] { {&quot;cat&quot;, &quot;dog&quot;, &quot;bird&quot;}, {&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;}, {&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;} }; // Call the tester method test(array); } // Tester method that generates output public static void test(String[][] array) { // Use a for loop to iterate over the elements of the array for (int i = 0; i &lt; array.length; i++) { for (int j = 0; j &lt; array[i].length; j++) { // Compare the current element to a specified string if (array[i][j].equals(&quot;cat&quot;)) { // Use De Morgan&#39;s law to convert an expression involving the AND and OR operators // into an equivalent expression involving the NOT and XOR operators boolean a = !array[i][j].equals(&quot;dog&quot;); boolean b = !array[i][j].equals(&quot;bird&quot;); boolean c = !(a || b); // Use concatenation to combine the elements of the array into a single string String s = array[i][0] + &quot;, &quot; + array[i][1] + &quot;, &quot; + array[i][2]; // Create a Point class to represent a point in 2D space class Point { int x; int y; public Point(int x, int y) { this.x = x; this.y = y; } @Override public String toString() { return &quot;(&quot; + x + &quot;, &quot; + y + &quot;)&quot;; } } // Create a Point object using the current indices of the array Point p = new Point(i, j); // Print the resulting values System.out.println(&quot;Element: &quot; + array[i][j]); System.out.println(&quot;De Morgan&#39;s law: &quot; + c); System.out.println(&quot;Concatenated string: &quot; + s); System.out.println(&quot;Point: &quot; + p); } } } } } .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2022/12/06/2darrays.html",
            "relUrl": "/jupyter/2022/12/06/2darrays.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Arraylists Unit 7/Vocab Integration",
            "content": "HW . Create an ArrayList that includes 2 of the 4 factors listed below. . Find and display the hashCode of an Arraylist before and after being sorted . Return &quot;ascending&quot; if the list is sorted in ascending order, return &quot;descending&quot; if it is descending, and return &quot;neither&quot; if neither . import java.util.Scanner; //allows scanners to be in program public class arrayList { public static void main(String args[]) {}} //object created (integer arraylist) ArrayList&lt;Integer&gt; numbers = new ArrayList&lt;Integer&gt;(); numbers.add(45); numbers.add(10); numbers.add(82); numbers.add(66); numbers.add(77); numbers.add(95); //printing out of order System.out.println(&quot;The list is not in order (neither): &quot; + numbers); System.out.println(&quot;Hashcode: &quot; + numbers.hashCode()); //sorting ArrayList in ascending order Collections.sort(numbers); //printing ArrayList after sorting in ascension System.out.println(&quot;The list is ascending: &quot; + numbers); //hashcode System.out.println(&quot;Hashcode: &quot; + numbers.hashCode()); //descending order Collections.sort(numbers, Collections.reverseOrder()); System.out.println(&quot;The list is descending: &quot; + numbers); System.out.println(&quot;Hashcode: &quot; + numbers.hashCode()); . The list is not in order (neither): [45, 10, 82, 66, 77, 95] Hashcode: -2107407840 The list is ascending: [10, 45, 66, 77, 82, 95] Hashcode: 1217396476 The list is descending: [95, 82, 77, 66, 45, 10] Hashcode: -609606810 . VOCAB IMPLEMENTATION . The following items are used by arrays and arraylists: . Casting, specifically for truncating or rounding: Arrays and arraylists may use casting for truncating or rounding values. For example, if an array or arraylist contains floating-point numbers, they may be cast to integers using the &#39;(int)&#39; syntax to round or truncate the values. . | Wrapper classes, why wrap int, double. Show examples: Arrays and arraylists may use wrapper classes to store primitive data types such as &#39;int&#39; and &#39;double&#39; in objects. Wrapper classes allow these primitive data types to be treated as objects, which can be useful for certain operations and data structures. For example, an array of &#39;int&#39; values could be wrapped in the &#39;Integer&#39; wrapper class to create an array of &#39;Integer&#39; objects. . | Math class, specifically Random usage: The &#39;Math&#39; class, which contains various mathematical functions and constants, may be used by arrays and arraylists. For example, the &#39;random&#39; method of the &#39;Math&#39; class can be used to generate random numbers, which could be used to initialize the values of an array or arraylist. . | for loop, enhanced for loop: Arrays and arraylists may be iterated over using a &#39;for&#39; loop or an &#39;enhanced for&#39; loop. These loops allow the programmer to easily access and manipulate each element in the array or arraylist in turn. . | while loop versus do while loop: Arrays and arraylists may be iterated over using a &#39;while&#39; loop or a &#39;do-while&#39; loop. These loops are similar to &#39;for&#39; loops, but offer more flexibility in terms of controlling the iteration. A &#39;while&#39; loop will only execute its body if a certain condition is met, whereas a &#39;do-while&#39; loop will always execute its body at least once. . | nested loops: Arrays and arraylists may be nested within other loops, allowing the programmer to perform complex operations on the data. For example, a &#39;for&#39; loop could be used to iterate over an array of arrays, allowing the programmer to access and manipulate the elements of each inner array in turn. . | Show use case of access modifiers: Public, Private, Protected: Arrays and arraylists may be declared with access modifiers such as &#39;public&#39;, &#39;private&#39;, and &#39;protected&#39;. These modifiers control the visibility and accessibility of the array or arraylist within the program. For example, a &#39;private&#39; array or arraylist can only be accessed within the class in which it is declared, whereas a &#39;public&#39; array or arraylist can be accessed by any other class. . | Static methods, Class methods: Arrays and arraylists may be declared as static or class methods. Static methods are methods that belong to the class itself, rather than to individual instances of the class. This means that they can be called without creating an instance of the class, and are often used for utility functions. Class methods are similar to static methods, but can be overridden by subclasses. . | this Keyword: The &#39;this&#39; keyword may be used in the context of arrays and arraylists to refer to the current instance of the class. This can be useful when dealing with multiple variables with the same name, or when calling methods on the current instance of the class. . | main method, tester methods: Arrays and arraylists may be tested using a &#39;main&#39; method or other tester methods. The &#39;main&#39; method is the entry point for a Java program, and is typically used to test the functionality of the program. Tester methods are similar to the &#39;main&#39; method, but are used to test specific components or features of the program. . | Inheritance . | . import java.util.ArrayList; import java.util.Random; import java.util.Scanner; // Parent class class Animal { // Private member variable private String name; // Constructor public Animal(String name) { this.name = name; } // Getter method for the name public String getName() { return this.name; } } // Child class that extends the Animal class class Cat extends Animal { // Private member variable private int lives; // Constructor that calls the parent class constructor public Cat(String name, int lives) { super(name); this.lives = lives; } // Getter method for the number of lives public int getLives() { return this.lives; } } public class ArrayListExample {} public static void main(String[] args){ // Create a Scanner object to read input from the user Scanner scanner = new Scanner(System.in); // Create an ArrayList of Animal objects ArrayList&lt;Animal&gt; animals = new ArrayList&lt;&gt;(); // Use a for loop to add random Cat objects to the list Random rand = new Random(); for (int i = 0; i &lt; 10; i++) { String name = &quot;Cat&quot; + i; int lives = rand.nextInt(9) + 1; animals.add(new Cat(name, lives)); } // Prompt the user to enter some text System.out.print(&quot;Enter some text: &quot;); // Read the user&#39;s input from the keyboard String input = scanner.nextLine(); // Print the user&#39;s input System.out.println(&quot;You entered: &quot; + input); // Use a while loop to print the names of the cats int i = 0; while (i &lt; animals.size()) { // Use the getName() method to get the name of the current cat System.out.println(&quot;Name: &quot; + animals.get(i).getName()); i++; } } . What arrays and arraylists don&#39;t include: . Casting, specifically for division: Arrays and arraylists do not use casting for division. Division is performed using the &#39;/&#39; operator, and the type of the result depends on the types of the operands. . | Concatenation, explain or illustrate rules on mixed type concatenation: Concatenation is not used by arrays or arraylists. Instead, these data structures store and manipulate individual elements of a specific type. . | Compound Boolean expression: A compound boolean expression is a boolean expression that combines two or more individual boolean expressions using logical operators such as &#39;and&#39; and &#39;or&#39;. This is not directly used by arrays or arraylists, although they may be used in a boolean expression to check the value of an array or arraylist element. . | Truth tables: Truth tables are not used by arrays or arraylists. Truth tables are used to show the logical relationships between different boolean expressions. . | De Morgan&#39;s Law: De Morgan&#39;s Law is not used by arrays or arraylists. It is a fundamental theorem of logic that describes the relationship between the logical operators &#39;and&#39; and &#39;or&#39; and their negations &#39;not and&#39; and &#39;not or&#39;. . | Comparing numbers: Comparing numbers is not used by arrays or arraylists. Arrays and arraylists store and manipulate individual elements, and the comparison of these elements is performed using the standard comparison operators such as &#39;==&#39;, &#39;&gt;&#39;, and &#39;&lt;&#39;. . | Comparing strings: Comparing strings is not used by arrays or arraylists. Like numbers, arrays and arraylists store and manipulate individual elements, and the comparison of these elements is performed using the standard comparison operators such as &#39;==&#39;, &#39;&gt;&#39;, and &#39;&lt;&#39;. . | Comparing objects: Comparing objects is not used by arrays or arraylists. Objects in Java are compared using the &#39;equals&#39; method, which is defined by the &#39;Object&#39; class and can be overridden by subclasses to provide custom comparison behavior. . | Arrays and arraylists do not typically contain objects, and even if they did, the &#39;equals&#39; method would not be used to compare them. . | Creating a class, describe naming conventions: Creating a class is not used by arrays or arraylists. In Java, arrays and arraylists are implemented using existing classes, and do not require the creation of new classes. Naming conventions refer to the rules and guidelines for naming variables, methods, and other entities in a program, and are not directly related to arrays or arraylists. . | Constructor, describe why there is no return: A constructor is not used by arrays or arraylists. A constructor is a special method that is used to create and initialize an instance of a class. Unlike other methods, constructors do not have a return type, because they do not return a value. Instead, they return a new instance of the class. . | Accessor methods, relationship to getter: Accessor methods, also known as getter methods, are not used by arrays or arraylists. Getter methods are methods that are used to retrieve the value of an object&#39;s field. They are typically used in classes to provide a way for other objects to access the object&#39;s internal state without directly accessing its fields. Arrays and arraylists do not have fields, and do not use getter methods. . | Mutator methods, relationship to setter, describe void return type: Mutator methods, also known as setter methods, are not used by arrays or arraylists. Setter methods are methods that are used to modify the value of an object&#39;s field. They are typically used in classes to provide a way . | .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2022/12/03/arraylists.html",
            "relUrl": "/jupyter/2022/12/03/arraylists.html",
            "date": " • Dec 3, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Vocab/Classes",
            "content": "Writing Classes . class Food { //attributes private String cuisine; private String name; private int mealsConsumed; //instance variables //constructor Food(String cuisine, String name, int mealsConsumed) { this.cuisine = cuisine; this.name = name; this.mealsConsumed = mealsConsumed; } public String getName(){ return name; } } public class Foodmain { public static void main(String[] args) { Food newFood = new Food(&quot;Indian&quot;, &quot;Dal&quot;, 20); System.out.println(newFood.getName()); } } Foodmain.main(null) . Dal . import java.util.Scanner; //allows scanners to be in program public class averages { public static void main(String[] args) { }} Scanner in = new Scanner(System.in); //creates a scanner System.out.print(&quot;Input 1st number: &quot;); //asks user for input int num1 = in.nextInt(); //saves number and goes to next int System.out.println(num1); System.out.print(&quot;Input 2nd number: &quot;); //same as above int num2 = in.nextInt(); System.out.println(num2); System.out.println(&quot;The average of those numbers are &quot; + (num1 + num2)/(2)); //prints out //num you want to divide is however many numbers you want to average out averages.main(null) . Input 1st number: 2 Input 2nd number: 20 The average of those numbers are 11 . Constructors . no return b/c not directly called | called for object creation | initialize and set values for objects | . public class Main {//main class int modelYear; String modelName;//attributes public Main(int year, String name) {//constructor modelYear = year; modelName = name; } public static void main(String[] args) { Main myCar = new Main(1969, &quot;Mustang&quot;);//objects System.out.println(myCar.modelYear + &quot; &quot; + myCar.modelName); } } // Outputs 1969 Mustang Main.main(null); . 1969 Mustang . Public, Private, Protected; Access Modifiers . private; only accessed within class | protected; within/outside package, accessible only through child class | public - open access | . //public //Exercise 1: //Write a program to reverse the words in a sentence //example: the strawberry cake //becomes: cake strawberry the //hints: use scanner to take in words //use split to break apart words to reverse them import java.util.*; //import scanner public class Main { public static String reverse_str_order(String input_sentence) { // if (input_sentence == null) { throw new IllegalArgumentException(&quot;Null&quot;); //no empty strings } StringBuilder stringBuilder = new StringBuilder(); String[] words = input_sentence.split(&quot; &quot;); for (int i = words.length - 1; i &gt;= 0; i--) { stringBuilder.append(words[i]); //place words in order if (i != 0) { //keep going until no more words are left stringBuilder.append(&quot; &quot;); } } return stringBuilder.toString(); } } public static void main(String[] args) { //prepares for scanning Scanner scanner = new Scanner(System.in); System.out.print(&quot;Input string: &quot;); //asks for user input String input = scanner.nextLine(); //takes in next line System.out.println(&quot; nResult: &quot; + reverse_str_word(input)); } . //private //Exercise 1: //Write a program to reverse the words in a sentence //example: the strawberry cake //becomes: cake strawberry the //hints: use scanner to take in words //use split to break apart words to reverse them import java.util.*; //import scanner public class Main { private static String reverse_str_order(String input_sentence) { // if (input_sentence == null) { throw new IllegalArgumentException(&quot;Null&quot;); //no empty strings } StringBuilder stringBuilder = new StringBuilder(); String[] words = input_sentence.split(&quot; &quot;); for (int i = words.length - 1; i &gt;= 0; i--) { stringBuilder.append(words[i]); //place words in order if (i != 0) { //keep going until no more words are left stringBuilder.append(&quot; &quot;); } } return stringBuilder.toString(); } } public static void main(String[] args) { //prepares for scanning Scanner scanner = new Scanner(System.in); System.out.print(&quot;Input string: &quot;); //asks for user input String input = scanner.nextLine(); //takes in next line System.out.println(&quot; nResult: &quot; + reverse_str_word(input)); } . //protected //Exercise 1: //Write a program to reverse the words in a sentence //example: the strawberry cake //becomes: cake strawberry the //hints: use scanner to take in words //use split to break apart words to reverse them import java.util.*; //import scanner public class Main { protected static String reverse_str_order(String input_sentence) { // if (input_sentence == null) { throw new IllegalArgumentException(&quot;Null&quot;); //no empty strings } StringBuilder stringBuilder = new StringBuilder(); String[] words = input_sentence.split(&quot; &quot;); for (int i = words.length - 1; i &gt;= 0; i--) { stringBuilder.append(words[i]); //place words in order if (i != 0) { //keep going until no more words are left stringBuilder.append(&quot; &quot;); } } return stringBuilder.toString(); } } public static void main(String[] args) { //prepares for scanning Scanner scanner = new Scanner(System.in); System.out.print(&quot;Input string: &quot;); //asks for user input String input = scanner.nextLine(); //takes in next line System.out.println(&quot; nResult: &quot; + reverse_str_word(input)); } . this Keyword . current object in method/constructor | eliminates confusion b/w attributes/parameters w/ the same name | . //ex public class Main { int x; // Constructor with a parameter public Main(int x) { this.x = x; } //this used to // Call the constructor public static void main(String[] args) { Main myObj = new Main(5); System.out.println(&quot;Value of x = &quot; + myObj.x); } } . Inheritance, extends . extends: extends a class, inherits information from another class | subclass; class inherits from another class | superclass; parent class being inherited from | . Big O notation for Hash map, Binary Search, Single loop, Nested Loop . language for runtime length | related to efficiency . | hashmap: single operation to obtain position of a searched element . | O(1) | . | binary search . | O(1) | . | eliminates half the elements each time | . | single loop . | O(n) | . | The next loop executes N times, if we assume the statement inside the loop is O(1), then the total time for the loop is N*O(1), which equals O(N) also known as linear time | . | nested loop . | O(N*N) | . | the first loop may execute N times, but for how many first loop executes, the inner loop executes N times | . | . HOMEWORK . //2021 FRQ 1A 3A //unit 5 //1a public int scoreGuess( String guess ) { int val = 0; int len = guess.length(); for( int i = 0; i &lt;= secret.length()-len; i+=1){ String ck = secret.substring( i, i+len ); if( ck.equals(guess) ){ val++; } } return val*len*len; } //3a public void addMembers( String[] names, int gradYear ){ for( String n : names ){ memberList.add(new MemberInfo( n, gradYear, true) ); } } .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2022/12/02/writingclasses.html",
            "relUrl": "/jupyter/2022/12/02/writingclasses.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Vocab/OOP",
            "content": "main method, tester methods . main method runs main code | tester method tests main code | . ex: . . Subclass constructor, super Keyword . subclass; inheriting class | super: refers to parent objects; calls superclass methods | . Overloading a method, same name different parameters . java feature allowing classes to have more than one method that is named the same (but it must have different parameters) | easier to overload one instead of having to define two identically-functioning methods | . Overriding a method, same signature of a method . when a subclass has the same method has the parent class | implements a certain aspect of method declared by a parent class | . Abstract Class, Abstract Method . is a method that has just the method definition but no actual implementation | can be subclassed, not instantiated | . Standard methods: toString(), equals(), hashCode() . toString returns string | hashCode returns hashCode of a string | . public class toString { public static void main(String[] args) {}} Integer x = new Integer(10); System.out.println(x.toString()); System.out.println(x.toString(90)); . 10 90 . public class hashCode { public static void main(String[] args) {}} String str_New = &quot;yay!&quot;; System.out.println(str_New.hashCode()); . 3701712 . Late binding of object . name of method looked up at runtime | compiler doesn&#39;t perform argument checks and leaves it up to runtime | . Polymorphism . class has different implementations of a method | same action performed differently | . Accessor &amp; Mutator methods . accessor methods: return private variable values | access to instance variables | . | don&#39;t take parameters | . | return type matches type of variable they&#39;re accessing | . | getters | . | mutator methods: called setters . | set the value | . | void return type; no return value | . | . //basic example public class Person { private String name; // private = restricted access // Getter public String getName() { return name; } // Setter public void setName(String newName) { this.name = newName; } } . import java.util.Scanner; public class Main { //static variables private static String[] words = {&quot;words&quot;, &quot;to&quot;, &quot;put&quot;, &quot;in&quot;}; private static String word = words[(int) (Math.random() * words.length)]; private static String asterisk = new String(new char[word.length()]).replace(&quot; 0&quot;,&quot;*&quot;); private static int count = 0; public static void main(String[] args) { Scanner sc = new Scanner(System.in); //create a while loop when count is less than 7 and //when asterisk contains * while (count &lt; 7 &amp;&amp; asterisk.contains(&quot;*&quot;)) { //print guess any letter in the word //print asterisk //take in guess and scan it in (string guess and take in scan) //hang(guess) System.out.println(&quot;Guess any letter in the word&quot;); System.out.println(asterisk); String guess = sc.next(); hang(guess); } sc.close(); }} . Static methods, Class methods . belong to class, not object | accessed through class | . public class friends { // instance variables private String name; private String email; private String phoneNumber; // Static counter variable public static int personCounter = 0; // static method to print out counter public static void printPersonCounter() { System.out.println(&quot;Person counter: &quot; + personCounter); } // constructor public friends(String initName, String initEmail, String initPhone) { name = initName; email = initEmail; phoneNumber = initPhone; personCounter++; } // toString() method public String toString() { return name + &quot;: &quot; + email + &quot; &quot; + phoneNumber; } // main method for testing public static void main(String[] args) { // call the constructor to create a new person friends p1 = new friends(&quot;Sana&quot;, &quot;sana@gmail.com&quot;, &quot;123-456-7890&quot;); friends p2 = new friends(&quot;Jean&quot;, &quot;jean@gmail.com&quot;, &quot;404 899-9955&quot;); friends.printPersonCounter(); } } . //class methods public class Main { static void myMethod() { System.out.println(&quot;Hello World!&quot;); } } //methods declared within a class . Wrapper Classes . Why wrap int, double, etc? | way to use primitive data types as objects | . . primitive type and corresponding wrapper class | Wrapper classes are used to convert any data type into an object. The primitive data types are not objects; they do not belong to any class; they are defined in the language itself. Sometimes, it is required to convert data types into objects in Java language. | . public class wrappers { public static void main(String[] args) {}} // int x = 10; // System.out.println(x.toString()); doesn&#39;t work because x is a primitive data type, not a modifiable object Integer x = new Integer(10); //to get around this, you define an integer wrapper class System.out.println(x.toString()); //x is now an object, not a primitive data type Integer x = new Integer(15); . 10 . Comparing Objects . use .equals() or == | checks if an object is null, or if attributes are the same | . class Food { //attributes String cuisine; String name; int mealsConsumed; //constructor Food(String cuisine, String name, int mealsConsumed) { this.cuisine = cuisine; this.name = name; this.mealsConsumed = mealsConsumed; } } //objects Food Dal1 = new Food(&quot;Indian&quot;, &quot;Mango Dal&quot;, 10); Food Dal2 = new Food(&quot;Indian&quot;, &quot;Moong Dal&quot;, 4); System.out.println(&quot;Dal1 = Dal2 is &quot; + Dal1.equals(Dal2)); . Dal1 = Dal2 is false . HOMEWORK . //UNIT 2 HW //goblin hacks public class Goblin { private String name; private int HP; private int DMG; private double hitChance; public String getName() { return name; } public int getHP() { return HP; } public int getDMG() { return DMG; } public double getHitChance() { return hitChance; } public boolean isAlive() { if (this.HP &gt; 0) { return true; } else { return false; } } public void setName(String newName) { this.name = newName; } public void setHP(int newHP) { this.HP = newHP; } public void takeDMG(int takenDamage) { this.HP -= takenDamage; } public void setDMG(int newDMG) { this.DMG = newDMG; } public void setHitChance(double newHitChance) { this.hitChance = newHitChance; } } import java.lang.Math; public class Duel { public static void attack(Goblin attackerGoblin, Goblin attackeeGoblin) { System.out.println(attackerGoblin.getName() + &quot; attacks &quot; + attackeeGoblin.getName() + &quot;!&quot;); if (0.8 &gt; attackerGoblin.getHitChance()) { attackeeGoblin.takeDMG(attackerGoblin.getDMG()); System.out.println(attackerGoblin.getName() + &quot; hits!&quot;); System.out.println(attackeeGoblin.getName() + &quot; takes &quot; + attackerGoblin.getDMG() + &quot; damage&quot;); } else { System.out.println(attackerGoblin.getName() + &quot; misses...&quot;); } System.out.println(attackeeGoblin.getName() + &quot; HP: &quot; + attackeeGoblin.getHP()); System.out.println(); } public static void fight(Goblin goblin1, Goblin goblin2) { while (goblin1.isAlive() &amp;&amp; goblin2.isAlive()) { attack(goblin1, goblin2); if (!goblin1.isAlive()) { System.out.println(goblin1.getName() + &quot; has perished&quot;); break; } attack(goblin2, goblin1); if (!goblin2.isAlive()) { System.out.println(goblin2.getName() + &quot; has perished&quot;); break; } } } public static void main(String[] args) { Goblin goblin1 = new Goblin(); goblin1.setName(&quot;jeffrey&quot;); goblin1.setHP(12); goblin1.setDMG(2); goblin1.setHitChance(0.50); Goblin goblin2 = new Goblin(); goblin2.setName(&quot;Gunther the great&quot;); goblin2.setHP(4); goblin2.setDMG(1); goblin2.setHitChance(1); fight(goblin1, goblin2); } } Duel.main(null); . jeffrey attacks Gunther the great! jeffrey hits! Gunther the great takes 2 damage Gunther the great HP: 2 Gunther the great attacks jeffrey! Gunther the great misses... jeffrey HP: 12 jeffrey attacks Gunther the great! jeffrey hits! Gunther the great takes 2 damage Gunther the great HP: 0 Gunther the great attacks jeffrey! Gunther the great misses... jeffrey HP: 12 Gunther the great has perished .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2022/12/02/usingobjects2.html",
            "relUrl": "/jupyter/2022/12/02/usingobjects2.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Vocab/Primitives",
            "content": "Casting, specifically for Division . integer and integer resulting in integer | if you want it to become a decimal, make it into a double | type promotion (with an integer and a double value) makes it more complicated, resulting in the decimal | . //example public class Variables { public static void main (String[] args) { } } System.out.println(10.0/15); . 0.6666666666666666 . public class Variables { public static void main(String[] args) { } } int x=10; int y=15; System.out.println(1 / 3); System.out.println(1.0 / 3); System.out.println(1 / 3.0); System.out.println((double) x / y); //type promote; produces decimal answer . 0 0.3333333333333333 0.3333333333333333 0.6666666666666666 . //modulus public class Variables { public static void main(String[] args) { }} System.out.println(15%10); . 5 . Casting, specifically for Truncating or Rounding . truncation vs. rounding | Rounding a number in the range [2.5, 3.5) returns the number 3 | Truncating a number in the range [3.0, 4.0) returns the number 3 | Where a square bracket &#39;[&#39; denotes inclusion in the range, and a parenthesis &#39;(&#39; denotes non-inclusion in the range -- ie. [3.0, 4.0) is the range of all numbers between 3 and 4, including 3 but not including 4. | . | truncation; chops off decimal portion | . //truncation public class truncation { public static void main(String[] args) {}} //example int a, b, c; double d, e; //declare variables a = 5; b = -13; d = 2.8; c = a + (int)d; //typecasting //truncation, cut off decimal //d became 2 instead of 2.8, so 2 + 5 = 7 System.out.println(&quot;c is: &quot; + c); . c is: 7 . //rounding public class rounding { public static void main(String[] args) {}} double number = 2.8; System.out.println( &quot;before rounding: &quot; + number ); number = Math.round(number); System.out.println( &quot;after rounding: &quot; + number ); double number = 2.4; System.out.println( &quot;before rounding: &quot; + number ); number = Math.round(number); System.out.println( &quot;after rounding: &quot; + number ); . before rounding: 2.8 after rounding: 3.0 before rounding: 2.4 after rounding: 2.0 . Concatenation . appendage of strings | . //ex String firstName = &quot;John &quot;; String lastName = &quot;Doe&quot;; System.out.println(firstName.concat(lastName)); . John Doe . class concatenation { public static void main(String arg[]) { } } String str1 = &quot;hello&quot;, str2 = &quot; to you&quot;, str3 = &quot; too&quot;; str1 = str1 + str2 + str3; // LINE A System.out.println(str1); //line a is &#39;+&#39; operator str2 = str2.concat(str3); System.out.println(str2); //line B //concat() method boolean folklore = true; boolean evermore = false; System.out.println(&quot;Folklore is a great album.&quot; + &quot; nThis statement is &quot; + folklore); // LINE C System.out.println(&quot;Folklore is a bad album.&quot; + &quot; nThis statement is &quot; + evermore); //concatenation of a boolean to a string . hello to you too to you too Folklore is a great album. This statement is true Folklore is a bad album. This statement is false . Math Classes (Random Usage) . methods to perform math tasks on numbers | random() returns a random number between 0 (inclusive) and 1 | public static double random^ | . import java.lang.Math; //java.lang.Math.random() class random { // driver code public static void main(String args[]) { } } double rand = Math.random(); System.out.println(&quot;Random Number:&quot; + rand); . Random Number:0.7941694146696837 . Type Casting in Java . when you assign a value of one primitive data type to another type. . | two types of casting in Java: . - Widening Casting (automatically) - converting a smaller type to a larger type size byte -&gt; short -&gt; char -&gt; int -&gt; long -&gt; float -&gt; double - Narrowing Casting (manually) - converting a larger type to a smaller size type double -&gt; float -&gt; long -&gt; int -&gt; char -&gt; short -&gt; byte . | . Why wrap int, double, etc? | way to use primitive data types as objects | . . primitive type and corresponding wrapper class | Wrapper classes are used to convert any data type into an object. The primitive data types are not objects; they do not belong to any class; they are defined in the language itself. Sometimes, it is required to convert data types into objects in Java language. | . HOMEWORK . //HW //2006 FRQ //2a public double purchasePrice() { return getListPrice() * (1+taxRate); } //3a public int compareCustomer(Customer other) { int compare = getName().compareTo(other.getName()); if (compare == 0) { return getID() - other.getID(); } else { return compare; } } .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2022/12/02/primitives1.html",
            "relUrl": "/jupyter/2022/12/02/primitives1.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Vocab/Iterations",
            "content": "For, While, Nested Loops . while loop | executed while something is happening | . | iterates over elements | . | can be infinite if boolean is always true | . | do-while loop . | condition is checked after executed statements | . | for loop . | certain amt of loops thru code block | . | nested loop: loop w/in loop . | for-each loop . | traverses an array in java | . | . While Loop . int x = 10; while (i&lt;10) { System.out.println(i); i++; } . public class arrays { public static void main(String[] args) { }} public static void main(String[] args) { int[] numbers = {2, 4, 6, 8, 10}; int i = 0; while (i &lt; numbers.length) { System.out.println(numbers[i]); i++; }} . Do-While Loop . int i = 0; do { System.out.println(i); i++; } while (i &lt; 5); . 0 1 2 3 4 . For/For-Each Loop . for (int i = 5; i &lt; 14; i++) { System.out.println(i); } for (int j = 1; j &lt;= 3; j++) { System.out.println(j); }//nested loop . 5 6 7 8 9 10 11 12 13 1 2 3 . //for-each loop int arr[]={10,20,30,40,50}; for(int j:arr){ System.out.println(j); } . 10 20 30 40 50 . HOMEWORK . //unit 4 hw //number guesser import java.util.Scanner; import java.lang.Math; Scanner number = new Scanner(System.in); float num_float = Integer.parseInt(number.nextLine()); // reads input System.out.println(num_float); double random = Math.random() * 10; System.out.println(random); public class Number{ public static void main(String[] args){ while (num_float != random){ if (num_float &lt; random){ System.out.println(&quot;too low. higher&quot;); // Scanner number = new Scanner(System.in); float num_float = Integer.parseInt(number.nextLine()); System.out.println(num_float); } if (num_float &gt; random){ System.out.println(&quot;too high. lower&quot;); Scanner number = new Scanner(System.in); float num_float = Integer.parseInt(number.nextLine()); System.out.println(num_float); } } System.out.println(&quot;you got it!&quot;); } } Number.main(null) . 5.0 1.5506652322791248 too high. lower 2.0 too high. lower 1.0 too high. lower -20.0 too high. lower . java.lang.NumberFormatException: For input string: &#34;&#34; at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) at java.base/java.lang.Integer.parseInt(Integer.java:662) at java.base/java.lang.Integer.parseInt(Integer.java:770) at Number.main(#20:1) at .(#28:1) .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2022/12/02/iterations.html",
            "relUrl": "/jupyter/2022/12/02/iterations.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Vocab/Booleans",
            "content": "Compound Boolean Expressions . test two things to be true before body of conditional is executed | &#39;&amp;&amp;&#39; used as logical operator and to join 2 booleans | . //ex //want to play video games, but parents only let you if you&#39;ve finished your homework and taken a shower public class compoundBooleans { public static void main(String[] args) { boolean didHomework = true; boolean tookShower = false; if (tookShower &amp;&amp; didHomework) { System.out.println(&quot;You can play&quot;); } else { System.out.println(&quot;No, you can&#39;t play&quot;); } } } . Truth Tables and De Morgan&#39;s Law . simplification of booleans through truth tables | organized way to define a boolean function | De Morgan&#39;s law: De Morgan&#39;s first law states that the complement of the union of two sets A and B is equal to the intersection of the complement of the sets A and B. | . . //demorgans law //has to be back home before 10, and has to walk the dog public class demorgans { public static void main(String[] args) { boolean backby10 = true; boolean walkedDog = false; if (!(backby10 &amp;&amp; walkedDog)) //means not A OR not B { System.out.println(&quot;True. You were back by 10 but didn&#39;t walk the dog&quot;); } else { System.out.println(&quot;You were back in time and walked the dog&quot;); }}} . public class demorgans { public static void main(String[] args) { boolean backby10 = true; boolean walkedDog = false; if (!(backby10 || walkedDog)) //means not A AND not B { System.out.println(&quot;False. You were back by 10 but didn&#39;t walk the dog&quot;); } else { System.out.println(&quot;You were back in time and walked the dog&quot;); } } } . Comparing Numbers . use == or compareTo() method | . //comparing numbers public class wrappers { public static void main(String[] args) {}} int x = 10; int y = 14; if(x==(y)) { System.out.println(&quot;Both x and y are equal&quot;); }else { System.out.println(&quot;x and y are not equal&quot;); } . x and y are not equal . public class wrappers { public static void main(String[] args) {}} // int x = 10; // System.out.println(x.toString()); doesn&#39;t work because x is a primitive data type, not a modifiable object Integer x = new Integer(10); //to get around this, you define an integer wrapper class System.out.println(x.compareTo(15)); //x is now an object, not a primitive data type System.out.println(x.compareTo(5)); //-1 is b/c 10 is less than 15 //1 is because 5 is less than 10 . -1 1 . int xy = 83; int yz = 20; int compare = Integer.compare(xy, yz); if(compare&gt;0) { System.out.println(&quot;xy is greater than yz&quot;); }else if (compare&lt;0){ System.out.println(&quot;xy is less than yz&quot;); }else{ System.out.println(&quot;xy and yz are equal&quot;); } . x is greater than y . Comparing Strings . use .equals() or == | equals() used to check if 2 strings contain the same content | . class comparingStrings{ public static void main(String args[]){ } } String s1=&quot;hello&quot;; String s2=&quot;goodbye&quot;; String s3=new String(&quot;hello&quot;); String s4=&quot;you&#39;re a good friend&quot;; String s5=&quot;goodbye&quot;; if (s2 == s5){ System.out.println(&quot;true&quot;); } System.out.println(s1.equals(s2)); System.out.println(s1.equals(s3)); System.out.println(s1.equals(s4)); . true false true false . HOMEWORK . //UNIT 3 //2009 3b public int getChargeStartTime(int chargeTime) { int lowestPrice = 0; for(int i = 1; i &lt; rateTable.length; i++) if(getChargingCost(startHour, chargeTime) &lt; getChargingCost(i, chargeTime)) i = startHour; return i; } //2017 1b public boolean isStrictlyIncreasing() { boolean increase = true; for (int i = 0; i &lt; digitList.size() - 1; i++) { if (digitList.get(i).intValue() &gt;= digitList.get(i + 1).intValue()) { increase = false; return true; } //2019 3b public boolean isBalanced(ArrayList&lt;String&gt; delimiters) { int openDels = 0; int closeDels = 0; for (String del : delimiters) { if (del.equals(openDels)) { openDels++; } else { closeDels++; if (closeDels &gt; openDels) { return false; } } return openDels == closeDels; } .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2022/12/02/booleansifs3.html",
            "relUrl": "/jupyter/2022/12/02/booleansifs3.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Vocabulary and its Integration",
            "content": "Type Casting in Java . when you assign a value of one primitive data type to another type. . | two types of casting in Java: . - Widening Casting (automatically) - converting a smaller type to a larger type size byte -&gt; short -&gt; char -&gt; int -&gt; long -&gt; float -&gt; double - Narrowing Casting (manually) - converting a larger type to a smaller size type double -&gt; float -&gt; long -&gt; int -&gt; char -&gt; short -&gt; byte . | . Casting, specifically for Division . integer and integer resulting in integer | if you want it to become a decimal, make it into a double | type promotion (with an integer and a double value) makes it more complicated, resulting in the decimal | . //example public class Variables { public static void main (String[] args) { } } System.out.println(10.0/15); . 0.6666666666666666 . public class Variables { public static void main(String[] args) { } } int x=10; int y=15; System.out.println(1 / 3); System.out.println(1.0 / 3); System.out.println(1 / 3.0); System.out.println((double) x / y); //type promote; produces decimal answer . 0 0.3333333333333333 0.3333333333333333 0.6666666666666666 . //modulus public class Variables { public static void main(String[] args) { }} System.out.println(15%10); . 5 . Casting, specifically for Truncating or Rounding . truncation vs. rounding | Rounding a number in the range [2.5, 3.5) returns the number 3 | Truncating a number in the range [3.0, 4.0) returns the number 3 | Where a square bracket &#39;[&#39; denotes inclusion in the range, and a parenthesis &#39;(&#39; denotes non-inclusion in the range -- ie. [3.0, 4.0) is the range of all numbers between 3 and 4, including 3 but not including 4. | . | truncation; chops off decimal portion | . //truncation public class truncation { public static void main(String[] args) {}} //example int a, b, c; double d, e; //declare variables a = 5; b = -13; d = 2.8; c = a + (int)d; //typecasting //truncation, cut off decimal //d became 2 instead of 2.8, so 2 + 5 = 7 System.out.println(&quot;c is: &quot; + c); . c is: 7 . //rounding public class rounding { public static void main(String[] args) {}} double number = 2.8; System.out.println( &quot;before rounding: &quot; + number ); number = Math.round(number); System.out.println( &quot;after rounding: &quot; + number ); double number = 2.4; System.out.println( &quot;before rounding: &quot; + number ); number = Math.round(number); System.out.println( &quot;after rounding: &quot; + number ); . before rounding: 2.8 after rounding: 3.0 before rounding: 2.4 after rounding: 2.0 . Wrapper Classes . Why wrap int, double, etc? | way to use primitive data types as objects | . . primitive type and corresponding wrapper class | Wrapper classes are used to convert any data type into an object. The primitive data types are not objects; they do not belong to any class; they are defined in the language itself. Sometimes, it is required to convert data types into objects in Java language. | . public class wrappers { public static void main(String[] args) {}} // int x = 10; // System.out.println(x.toString()); doesn&#39;t work because x is a primitive data type, not a modifiable object Integer x = new Integer(10); //to get around this, you define an integer wrapper class System.out.println(x.toString()); //x is now an object, not a primitive data type Integer x = new Integer(15); . 10 . Concatenation . appendage of strings | . //ex String firstName = &quot;John &quot;; String lastName = &quot;Doe&quot;; System.out.println(firstName.concat(lastName)); . John Doe . class concatenation { public static void main(String arg[]) { } } String str1 = &quot;hello&quot;, str2 = &quot; to you&quot;, str3 = &quot; too&quot;; str1 = str1 + str2 + str3; // LINE A System.out.println(str1); //line a is &#39;+&#39; operator str2 = str2.concat(str3); System.out.println(str2); //line B //concat() method boolean folklore = true; boolean evermore = false; System.out.println(&quot;Folklore is a great album.&quot; + &quot; nThis statement is &quot; + folklore); // LINE C System.out.println(&quot;Folklore is a bad album.&quot; + &quot; nThis statement is &quot; + evermore); //concatenation of a boolean to a string . hello to you too to you too Folklore is a great album. This statement is true Folklore is a bad album. This statement is false . Math Classes (Random Usage) . methods to perform math tasks on numbers | random() returns a random number between 0 (inclusive) and 1 | public static double random^ | . import java.lang.Math; //java.lang.Math.random() class random { // driver code public static void main(String args[]) { } } double rand = Math.random(); System.out.println(&quot;Random Number:&quot; + rand); . Random Number:0.7941694146696837 . Compound Boolean Expressions . test two things to be true before body of conditional is executed | &#39;&amp;&amp;&#39; used as logical operator and to join 2 booleans | . //ex //want to play video games, but parents only let you if you&#39;ve finished your homework and taken a shower public class compoundBooleans { public static void main(String[] args) { boolean didHomework = true; boolean tookShower = false; if (tookShower &amp;&amp; didHomework) { System.out.println(&quot;You can play&quot;); } else { System.out.println(&quot;No, you can&#39;t play&quot;); } } } . Truth Tables and De Morgan&#39;s Law . simplification of booleans through truth tables | organized way to define a boolean function | De Morgan&#39;s law: De Morgan&#39;s first law states that the complement of the union of two sets A and B is equal to the intersection of the complement of the sets A and B. | . . //demorgans law //has to be back home before 10, and has to walk the dog public class demorgans { public static void main(String[] args) { boolean backby10 = true; boolean walkedDog = false; if (!(backby10 &amp;&amp; walkedDog)) //means not A OR not B { System.out.println(&quot;True. You were back by 10 but didn&#39;t walk the dog&quot;); } else { System.out.println(&quot;You were back in time and walked the dog&quot;); }}} . public class demorgans { public static void main(String[] args) { boolean backby10 = true; boolean walkedDog = false; if (!(backby10 || walkedDog)) //means not A AND not B { System.out.println(&quot;False. You were back by 10 but didn&#39;t walk the dog&quot;); } else { System.out.println(&quot;You were back in time and walked the dog&quot;); } } } . Comparing Numbers . use == or compareTo() method | . //comparing numbers public class wrappers { public static void main(String[] args) {}} int x = 10; int y = 14; if(x==(y)) { System.out.println(&quot;Both x and y are equal&quot;); }else { System.out.println(&quot;x and y are not equal&quot;); } . x and y are not equal . public class wrappers { public static void main(String[] args) {}} // int x = 10; // System.out.println(x.toString()); doesn&#39;t work because x is a primitive data type, not a modifiable object Integer x = new Integer(10); //to get around this, you define an integer wrapper class System.out.println(x.compareTo(15)); //x is now an object, not a primitive data type System.out.println(x.compareTo(5)); //-1 is b/c 10 is less than 15 //1 is because 5 is less than 10 . -1 1 . int xy = 83; int yz = 20; int compare = Integer.compare(xy, yz); if(compare&gt;0) { System.out.println(&quot;xy is greater than yz&quot;); }else if (compare&lt;0){ System.out.println(&quot;xy is less than yz&quot;); }else{ System.out.println(&quot;xy and yz are equal&quot;); } . x is greater than y . Comparing Strings . use .equals() or == | equals() used to check if 2 strings contain the same content | . class comparingStrings{ public static void main(String args[]){ } } String s1=&quot;hello&quot;; String s2=&quot;goodbye&quot;; String s3=new String(&quot;hello&quot;); String s4=&quot;you&#39;re a good friend&quot;; String s5=&quot;goodbye&quot;; if (s2 == s5){ System.out.println(&quot;true&quot;); } System.out.println(s1.equals(s2)); System.out.println(s1.equals(s3)); System.out.println(s1.equals(s4)); . true false true false . Comparing Objects . use .equals() or == | checks if an object is null, or if attributes are the same | . class Food { //attributes String cuisine; String name; int mealsConsumed; //constructor Food(String cuisine, String name, int mealsConsumed) { this.cuisine = cuisine; this.name = name; this.mealsConsumed = mealsConsumed; } } //objects Food Dal1 = new Food(&quot;Indian&quot;, &quot;Mango Dal&quot;, 10); Food Dal2 = new Food(&quot;Indian&quot;, &quot;Moong Dal&quot;, 4); System.out.println(&quot;Dal1 = Dal2 is &quot; + Dal1.equals(Dal2)); . Dal1 = Dal2 is false . For, While, Nested Loops . while loop | executed while something is happening | . | iterates over elements | . | can be infinite if boolean is always true | . | do-while loop . | condition is checked after executed statements | . | for loop . | certain amt of loops thru code block | . | nested loop: loop w/in loop . | for-each loop . | traverses an array in java | . | . While Loop . int x = 10; while (i&lt;10) { System.out.println(i); i++; } . public class arrays { public static void main(String[] args) { }} public static void main(String[] args) { int[] numbers = {2, 4, 6, 8, 10}; int i = 0; while (i &lt; numbers.length) { System.out.println(numbers[i]); i++; }} . Do-While Loop . int i = 0; do { System.out.println(i); i++; } while (i &lt; 5); . 0 1 2 3 4 . For/For-Each Loop . for (int i = 5; i &lt; 14; i++) { System.out.println(i); } for (int j = 1; j &lt;= 3; j++) { System.out.println(j); }//nested loop . 5 6 7 8 9 10 11 12 13 1 2 3 . //for-each loop int arr[]={10,20,30,40,50}; for(int j:arr){ System.out.println(j); } . 10 20 30 40 50 . Writing Classes . blueprint for objects | has constructors, methods, variables, attributes | objects are instances of a class | attributes are components | methods are object actions | public/private -- accessible/not accessible outside the class | constructors initialize instance variables when objects are created | Naming Conventions: CamelCase (simple, descriptive, straightforward) | . class Food { //attributes private String cuisine; private String name; private int mealsConsumed; //instance variables //constructor Food(String cuisine, String name, int mealsConsumed) { this.cuisine = cuisine; this.name = name; this.mealsConsumed = mealsConsumed; } public String getName(){ return name; } } public class Foodmain { public static void main(String[] args) { Food newFood = new Food(&quot;Indian&quot;, &quot;Dal&quot;, 20); System.out.println(newFood.getName()); } } Foodmain.main(null) . Dal . import java.util.Scanner; //allows scanners to be in program public class averages { public static void main(String[] args) { }} Scanner in = new Scanner(System.in); //creates a scanner System.out.print(&quot;Input 1st number: &quot;); //asks user for input int num1 = in.nextInt(); //saves number and goes to next int System.out.println(num1); System.out.print(&quot;Input 2nd number: &quot;); //same as above int num2 = in.nextInt(); System.out.println(num2); System.out.println(&quot;The average of those numbers are &quot; + (num1 + num2)/(2)); //prints out //num you want to divide is however many numbers you want to average out averages.main(null) . Input 1st number: 2 Input 2nd number: 20 The average of those numbers are 11 . Constructors . no return b/c not directly called | called for object creation | initialize and set values for objects | . public class Main {//main class int modelYear; String modelName;//attributes public Main(int year, String name) {//constructor modelYear = year; modelName = name; } public static void main(String[] args) { Main myCar = new Main(1969, &quot;Mustang&quot;);//objects System.out.println(myCar.modelYear + &quot; &quot; + myCar.modelName); } } // Outputs 1969 Mustang Main.main(null); . 1969 Mustang . Accessor &amp; Mutator methods . accessor methods: return private variable values | access to instance variables | . | don&#39;t take parameters | . | return type matches type of variable they&#39;re accessing | . | getters | . | mutator methods: called setters . | set the value | . | void return type; no return value | . | . //basic example public class Person { private String name; // private = restricted access // Getter public String getName() { return name; } // Setter public void setName(String newName) { this.name = newName; } } . Static/Class Variables . static variables: common property of all objects; not unique | gets memory only once | . | makes memory efficient | . | . import java.util.Scanner; public class Main { //static variables private static String[] words = {&quot;words&quot;, &quot;to&quot;, &quot;put&quot;, &quot;in&quot;}; private static String word = words[(int) (Math.random() * words.length)]; private static String asterisk = new String(new char[word.length()]).replace(&quot; 0&quot;,&quot;*&quot;); private static int count = 0; public static void main(String[] args) { Scanner sc = new Scanner(System.in); //create a while loop when count is less than 7 and //when asterisk contains * while (count &lt; 7 &amp;&amp; asterisk.contains(&quot;*&quot;)) { //print guess any letter in the word //print asterisk //take in guess and scan it in (string guess and take in scan) //hang(guess) System.out.println(&quot;Guess any letter in the word&quot;); System.out.println(asterisk); String guess = sc.next(); hang(guess); } sc.close(); }} . Java Recursion . the process of making a function call itself | provides a way to break complicated problems down into simple problems which are easier to solve | . //ads all of the #s up to 10 public class Main { public static void main(String[] args) { int result = sum(10); System.out.println(result); } public static int sum(int k) { if (k &gt; 0) { return k + sum(k - 1); } else { return 0; } } } . . Public, Private, Protected; Access Modifiers . private; only accessed within class | protected; within/outside package, accessible only through child class | public - open access | . //public //Exercise 1: //Write a program to reverse the words in a sentence //example: the strawberry cake //becomes: cake strawberry the //hints: use scanner to take in words //use split to break apart words to reverse them import java.util.*; //import scanner public class Main { public static String reverse_str_order(String input_sentence) { // if (input_sentence == null) { throw new IllegalArgumentException(&quot;Null&quot;); //no empty strings } StringBuilder stringBuilder = new StringBuilder(); String[] words = input_sentence.split(&quot; &quot;); for (int i = words.length - 1; i &gt;= 0; i--) { stringBuilder.append(words[i]); //place words in order if (i != 0) { //keep going until no more words are left stringBuilder.append(&quot; &quot;); } } return stringBuilder.toString(); } } public static void main(String[] args) { //prepares for scanning Scanner scanner = new Scanner(System.in); System.out.print(&quot;Input string: &quot;); //asks for user input String input = scanner.nextLine(); //takes in next line System.out.println(&quot; nResult: &quot; + reverse_str_word(input)); } . //private //Exercise 1: //Write a program to reverse the words in a sentence //example: the strawberry cake //becomes: cake strawberry the //hints: use scanner to take in words //use split to break apart words to reverse them import java.util.*; //import scanner public class Main { private static String reverse_str_order(String input_sentence) { // if (input_sentence == null) { throw new IllegalArgumentException(&quot;Null&quot;); //no empty strings } StringBuilder stringBuilder = new StringBuilder(); String[] words = input_sentence.split(&quot; &quot;); for (int i = words.length - 1; i &gt;= 0; i--) { stringBuilder.append(words[i]); //place words in order if (i != 0) { //keep going until no more words are left stringBuilder.append(&quot; &quot;); } } return stringBuilder.toString(); } } public static void main(String[] args) { //prepares for scanning Scanner scanner = new Scanner(System.in); System.out.print(&quot;Input string: &quot;); //asks for user input String input = scanner.nextLine(); //takes in next line System.out.println(&quot; nResult: &quot; + reverse_str_word(input)); } . //protected //Exercise 1: //Write a program to reverse the words in a sentence //example: the strawberry cake //becomes: cake strawberry the //hints: use scanner to take in words //use split to break apart words to reverse them import java.util.*; //import scanner public class Main { protected static String reverse_str_order(String input_sentence) { // if (input_sentence == null) { throw new IllegalArgumentException(&quot;Null&quot;); //no empty strings } StringBuilder stringBuilder = new StringBuilder(); String[] words = input_sentence.split(&quot; &quot;); for (int i = words.length - 1; i &gt;= 0; i--) { stringBuilder.append(words[i]); //place words in order if (i != 0) { //keep going until no more words are left stringBuilder.append(&quot; &quot;); } } return stringBuilder.toString(); } } public static void main(String[] args) { //prepares for scanning Scanner scanner = new Scanner(System.in); System.out.print(&quot;Input string: &quot;); //asks for user input String input = scanner.nextLine(); //takes in next line System.out.println(&quot; nResult: &quot; + reverse_str_word(input)); } . Static methods, Class methods . belong to class, not object | accessed through class | . public class friends { // instance variables private String name; private String email; private String phoneNumber; // Static counter variable public static int personCounter = 0; // static method to print out counter public static void printPersonCounter() { System.out.println(&quot;Person counter: &quot; + personCounter); } // constructor public friends(String initName, String initEmail, String initPhone) { name = initName; email = initEmail; phoneNumber = initPhone; personCounter++; } // toString() method public String toString() { return name + &quot;: &quot; + email + &quot; &quot; + phoneNumber; } // main method for testing public static void main(String[] args) { // call the constructor to create a new person friends p1 = new friends(&quot;Sana&quot;, &quot;sana@gmail.com&quot;, &quot;123-456-7890&quot;); friends p2 = new friends(&quot;Jean&quot;, &quot;jean@gmail.com&quot;, &quot;404 899-9955&quot;); friends.printPersonCounter(); } } . //class methods public class Main { static void myMethod() { System.out.println(&quot;Hello World!&quot;); } } //methods declared within a class . this Keyword . current object in method/constructor | eliminates confusion b/w attributes/parameters w/ the same name | . //ex public class Main { int x; // Constructor with a parameter public Main(int x) { this.x = x; } //this used to // Call the constructor public static void main(String[] args) { Main myObj = new Main(5); System.out.println(&quot;Value of x = &quot; + myObj.x); } } . main method, tester methods . main method runs main code | tester method tests main code | . ex: . . Inheritance, extends . extends: extends a class, inherits information from another class | subclass; class inherits from another class | superclass; parent class being inherited from | . //ex class school { protected String brand = &quot;work&quot;; // attribute public void pencil() { // method System.out.println(&quot;write, write!&quot;); } } class classwork extends school { private String modelName = &quot;google doc&quot;; // attribute public static void main(String[] args) { // Create a new school object School mySchool = new School(); // Call the pencil() method (from the school class) on the work object mySchool.pencil(); // Display the value of the brand attribute (from the Vehicle class) and the value of the modelName from the Car class System.out.println(mySchool.brand + &quot; &quot; + mySchool.modelName); } } . Subclass constructor, super Keyword . subclass; inheriting class | super: refers to parent objects; calls superclass methods | . Overloading a method, same name different parameters . java feature allowing classes to have more than one method that is named the same (but it must have different parameters) | easier to overload one instead of having to define two identically-functioning methods | . Overriding a method, same signature of a method . when a subclass has the same method has the parent class | implements a certain aspect of method declared by a parent class | . Abstract Class, Abstract Method . is a method that has just the method definition but no actual implementation | can be subclassed, not instantiated | . Standard methods: toString(), equals(), hashCode() . toString returns string | hashCode returns hashCode of a string | . public class toString { public static void main(String[] args) {}} Integer x = new Integer(10); System.out.println(x.toString()); System.out.println(x.toString(90)); . 10 90 . public class hashCode { public static void main(String[] args) {}} Object1 []= &quot;yay!&quot;; System.out.println(str_New.hashCode()); . 3701712 . Late binding of object . name of method looked up at runtime | compiler doesn&#39;t perform argument checks and leaves it up to runtime | . Polymorphism . class has different implementations of a method | same action performed differently | . Big O notation for Hash map, Binary Search, Single loop, Nested Loop . language for runtime length | related to efficiency . | hashmap: single operation to obtain position of a searched element . | O(1) | . | binary search . | O(1) | . | eliminates half the elements each time | . | single loop . | O(n) | . | The next loop executes N times, if we assume the statement inside the loop is O(1), then the total time for the loop is N*O(1), which equals O(N) also known as linear time | . | nested loop . | O(N*N) | . | the first loop may execute N times, but for how many first loop executes, the inner loop executes N times | . | .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2022/12/01/vocabularyanditsintegration.html",
            "relUrl": "/jupyter/2022/12/01/vocabularyanditsintegration.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "HW ASSNS 2-6 Tri 1",
            "content": "UNIT 1 HW . //HW //2006 FRQ //2a public double purchasePrice() { return getListPrice() * (1+taxRate); } //3a public int compareCustomer(Customer other) { int compare = getName().compareTo(other.getName()); if (compare == 0) { return getID() - other.getID(); } else { return compare; } } . UNIT 2 HW . //UNIT 2 HW //goblin hacks public class Goblin { private String name; private int HP; private int DMG; private double hitChance; public String getName() { return name; } public int getHP() { return HP; } public int getDMG() { return DMG; } public double getHitChance() { return hitChance; } public boolean isAlive() { if (this.HP &gt; 0) { return true; } else { return false; } } public void setName(String newName) { this.name = newName; } public void setHP(int newHP) { this.HP = newHP; } public void takeDMG(int takenDamage) { this.HP -= takenDamage; } public void setDMG(int newDMG) { this.DMG = newDMG; } public void setHitChance(double newHitChance) { this.hitChance = newHitChance; } } import java.lang.Math; public class Duel { public static void attack(Goblin attackerGoblin, Goblin attackeeGoblin) { System.out.println(attackerGoblin.getName() + &quot; attacks &quot; + attackeeGoblin.getName() + &quot;!&quot;); if (0.8 &gt; attackerGoblin.getHitChance()) { attackeeGoblin.takeDMG(attackerGoblin.getDMG()); System.out.println(attackerGoblin.getName() + &quot; hits!&quot;); System.out.println(attackeeGoblin.getName() + &quot; takes &quot; + attackerGoblin.getDMG() + &quot; damage&quot;); } else { System.out.println(attackerGoblin.getName() + &quot; misses...&quot;); } System.out.println(attackeeGoblin.getName() + &quot; HP: &quot; + attackeeGoblin.getHP()); System.out.println(); } public static void fight(Goblin goblin1, Goblin goblin2) { while (goblin1.isAlive() &amp;&amp; goblin2.isAlive()) { attack(goblin1, goblin2); if (!goblin1.isAlive()) { System.out.println(goblin1.getName() + &quot; has perished&quot;); break; } attack(goblin2, goblin1); if (!goblin2.isAlive()) { System.out.println(goblin2.getName() + &quot; has perished&quot;); break; } } } public static void main(String[] args) { Goblin goblin1 = new Goblin(); goblin1.setName(&quot;jeffrey&quot;); goblin1.setHP(12); goblin1.setDMG(2); goblin1.setHitChance(0.50); Goblin goblin2 = new Goblin(); goblin2.setName(&quot;Gunther the great&quot;); goblin2.setHP(4); goblin2.setDMG(1); goblin2.setHitChance(1); fight(goblin1, goblin2); } } Duel.main(null); . jeffrey attacks Gunther the great! jeffrey hits! Gunther the great takes 2 damage Gunther the great HP: 2 Gunther the great attacks jeffrey! Gunther the great misses... jeffrey HP: 12 jeffrey attacks Gunther the great! jeffrey hits! Gunther the great takes 2 damage Gunther the great HP: 0 Gunther the great attacks jeffrey! Gunther the great misses... jeffrey HP: 12 Gunther the great has perished . UNIT 3 HW . //2017 1b public boolean isStrictlyIncreasing() { boolean increase = true; for (int i = 0; i &lt; digitList.size() - 1; i++) { if (digitList.get(i).intValue() &gt;= digitList.get(i + 1).intValue()) { increase = false; return false; return false; } . //UNIT 3 //2009 3b public int getChargeStartTime(int chargeTime) { int lowestPrice = 0; for(int i = 1; i &lt; rateTable.length; i++) if(getChargingCost(startHour, chargeTime) &lt; getChargingCost(i, chargeTime)) i = startHour; return i; } . //2019 3b public boolean isBalanced(ArrayList&lt;String&gt; delimiters) { int openDels = 0; int closeDels = 0; for (String del : delimiters) { if (del.equals(openDel)) { openDels++; } else { closeDels++; if (closeDels &gt; openDels) { return false; } } return openDels == closeDels; } . UNIT 4 HW . //unit 4 hw //number guesser import java.util.Scanner; import java.lang.Math; Scanner number = new Scanner(System.in); float num_float = Integer.parseInt(number.nextLine()); // reads input System.out.println(number_float); double random = Math.random() * 10; System.out.println(random); public class Number{ public static void main(String[] args){ while (num_float != random){ if (num_float &lt; random){ System.out.println(&quot;too low. higher&quot;); // Scanner number = new Scanner(System.in); float num_float = Integer.parseInt(number.nextLine()); System.out.println(number_float); } if (number_float &gt; random){ System.out.println(&quot;too high. lower&quot;); Scanner number = new Scanner(System.in); float num_float = Integer.parseInt(number.nextLine()); System.out.println(num_float); } } System.out.println(&quot;you got it!&quot;); } } Number.main(null) . 5.0 2.3061709422053713 too high. lower 10.0 too high. lower 3.0 too high. lower . java.lang.NumberFormatException: For input string: &#34;&#34; at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) at java.base/java.lang.Integer.parseInt(Integer.java:662) at java.base/java.lang.Integer.parseInt(Integer.java:770) at Number.main(#21:1) at .(#48:1) . unit 4 hw Quiz: . UNIT 5 HW . //unit 5 //1a public int scoreGuess( String guess ) { int val = 0; int len = guess.length(); for( int i = 0; i &lt;= secret.length()-len; i+=1){ String ck = secret.substring( i, i+len ); if( ck.equals(guess) ){ val++; } } return val*len*len; } . //3a public void addMembers( String[] names, int gradYear ){ for( String n : names ){ memberList.add(new MemberInfo( n, gradYear, true) ); } } . Arrays Unit 6 . swaps first/last elements . import java.util.Arrays; public class unit6hw { public static void main(String[] args) {}} int[] array1 = {92, 38, 23, 90, 12, 54, 72}; System.out.println(&quot;Original Array: &quot;+Arrays.toString(array1)); int x = array1[0]; array1[0] = array1[array1.length-1]; array1[array1.length-1] = x; System.out.println(&quot;New array: &quot;+Arrays.toString(array1)); //swaps first/last elements . Original Array: [92, 38, 23, 90, 12, 54, 72] New array: [72, 38, 23, 90, 12, 54, 92] . all even values to 0 . //all even values to 0 import java.util.Arrays; public class unit6hw { public static void main(String[] args) {}} int[] array1; array1 = new int[7]; int array1[] = {92, 38, 23, 90, 65, 54, 72, 99}; // const int size = 7; // int array1[size] = { 1,2,3,4,5,6,7 }; for (int i = 0; i &lt; array1.length; i++) { if (array1[i] % 2 == 0) array1[i] = 0; System.out.println(&quot;New array: &quot;+Arrays.toString(array1)); } . New array: [0, 38, 23, 90, 65, 54, 72, 99] New array: [0, 0, 23, 90, 65, 54, 72, 99] New array: [0, 0, 23, 90, 65, 54, 72, 99] New array: [0, 0, 23, 0, 65, 54, 72, 99] New array: [0, 0, 23, 0, 65, 54, 72, 99] New array: [0, 0, 23, 0, 65, 0, 72, 99] New array: [0, 0, 23, 0, 65, 0, 0, 99] New array: [0, 0, 23, 0, 65, 0, 0, 99] .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2022/11/09/hwassignments.html",
            "relUrl": "/jupyter/2022/11/09/hwassignments.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "REFLECTION, Test Corrections - FINAL",
            "content": "Reflection of MCQ: I did not get great score. I think this is because of poor planning and studying methods, and I didn&#39;t take the final until late at night, which hindered my ability to get a great score. I also think that I didn&#39;t study enough and did not put enough time into getting the content. I think will do test corrections moving forward to ensure a better score and I hope to do better than my first attempt. My most missed type of question were ones with arrays, where they gave me a segment of code and asked me to analyze it to answer a question. An example could me number 31, where the answer isn&#39;t the &quot;nothing is printed because an ArrayIndexOutOfBoundsException is thrown during the execution of method mystery&quot;, but the answer is: Incorrect. Since the loop terminates when k is data.length – 1 no ArrayIndexOutOfBoundsException is thrown. The values of k that cause the loop to execute are 0, 1, 2 and 3. Since k + 1 is also used as an index in the loop body, indices 0, 1, 2, 3 and 4 are accessed, all of which are valid indices in data. I had difficulty deciphering what the code was saying, so more often than not, I required help from the internet. I think that I definitely need to study java syntax and semantics more before the next test. . I think I need more practice with arraylists for sure. I also think I had trouble with a lot of basic logical questions. For example, question 35, where it asked me what the program segment would print. I ignored the second iteration of the loop. The answer would be: Incorrect. This is the value of result after the first iteration of the loop. However, at this point num /= 10 results in num being updated to the value of itself divided by 10 using integer division. The variable num is assigned the value 257, which is greater than 0 and the loop continues. . Test Corrections: . Q4: . Correction: 2 is Correct. When we evaluate the express(x &lt; 10) &amp;&amp; (y &lt; 0) for x having the value 7 and y having the value 3, x &lt; 10 evaluates to true, since 7 is less than 10, and y &lt; 0 evaluates to false, since 3 is not less than 0. The logic operator &amp;&amp; evaluates to true when both conditions are true and evaluates to false otherwise. Since the second condition is false, the boolean expression is false. As a result, the compiler will skip the first output statement and execute the statement in the else. The expression x / y is integer division for 7 / 3, which is 2. . Q5: . Correction: C is Correct. The method mystery contains a loop that starts k at 1 and iterates, incrementing k by 1 until k exceeds n, which is 6. In each iteration, the Integer value k * k + 3 is added to the ArrayList seq. In the first iteration, when k is 1, the value 4 is added to the seq, which now contains {4}. In the second iteration, when k is 2, the value 7 is added to seq, which now contains {4, 7}. In the third iteration, when k is 3, the value 12 is added to seq, which now contains {4, 7, 12}. In the fourth iteration, when k is 4, the value 19 is added to seq, which now contains {4, 7, 12, 19}. In the fifth iteration, when k is 5, the value 28 is added to seq, which now contains {4, 7, 12, 19, 28}. In the sixth and final iteration, when k is 6, the value 39 is added to seq, which now contains {4, 7, 12, 19, 28, 39}. . Q6: . Correction: is Correct. To determine the positive distance between two values, we need to take the absolute value of the difference using Math.abs. Once the difference is calculated, the method should return true if this difference is less than or equal to the tolerance and false otherwise. . Q8: . Correction: C is Correct. Choice I uses the no parameter constructor to create a new Student object and assign it to variable a of type Student. Choice II uses the two-parameter constructor, with the parameters in the order of String then int, to create a new Student object and assign it to variable b of type Student. Choice III attempts to use the two-parameter constructor, however the order of the parameters is a String followed by a String. There is no two-parameter constructor with two String parameters. This statement will cause a compile time error. . Q9: . Corrections: B is correct. The elements of array key have indices 0 to key.length – 1. Since the for loop control variable i is initialized to 1 and will increase by 1 until it is equal to key.length, the access to key should be adjusted by 1, otherwise the value at index 0 will not be included in the sum and when i is key.length an ArrayIndexOutOfBoundsException will be thrown. . Q10: . Corrections: B is Correct. The for loop starts the loop control variable k with the value 0 and increments by 1 until k == arr.length - 1. In each iteration of the for loop, the element of arr at index k is compared with the element of arr at index k + 1. If the current value is greater than the next value, the current value of k followed by the element at index k is printed. Since the comparison is using the current value of k as an index as well as the subsequent value of k, the for loop must not iterate when k is the last index of arr (arr.length – 1). In the first iteration, k has the value 0, arr[0] is 7 which is greater than arr[1] which is 2, therefore 0 7 is printed. In the second iteration, k has the value 1, arr[1] is 2 which is not greater than arr[2] which is 5. Nothing is printed. In the third iteration, k has the value 2, arr[2] is 5 which is greater than arr[3] which is 3, therefore 2 5 is printed. In the fourth iteration, k has the value 3, arr[3] is 3 which is greater than arr[4] which is 0, therefore 3 3 is printed. In the fifth iteration k has the value 4, arr[4] is 0 which is not greater than arr[5] which is 10. Nothing is printed. The value of k is incremented and has a value of 5, which is equal to arr.length – 1 and the loop terminates. . Q11: . Corrections: C is Correct. Correct. The for loop control variable k starts with the value 3, is incremented by 1 and terminates the loop when its value is arr.length – 1. In the first iteration, when k is 3, arr[3] is assigned the value arr[4]. The contents of the arr have been updated to {1, 2, 3, 5, 5, 6, 7}. In the second iteration, when k is 4, arr[4] is assigned the value arr[5]. The contents of arr have been updated to {1, 2, 3, 5, 6, 6, 7}. In the third iteration, when k is 5, arr[5] is assigned the value arr[6]. The contents of arr have been updated to {1, 2, 3, 5, 6, 7, 7}. Then k is incremented to 6 and the loop terminates. . Q12: . Corrections: B is Correct. List is an interface, which an ArrayList implements. Please note that List is no longer tested as part of the AP CSA exam and ArrayList will be used instead. The manipulate method contains a for loop with a loop control variable k that starts at the right most index of animals, decrements by 1 each time, until k is equal to 0. In the first iteration, when k is 5, if the element of animals at 5 (“baboon”) starts with a “b”, which it does, then this value is removed from the list and inserted at index 1. The list would then be {“bear”, “baboon”, “zebra”, “bass”, “cat”, “koala”}. In the second iteration, when k is 4, the element of animals at 4 (“cat”) does not start with a “b” and no changes are made to the list. In the third iteration, when k is 3, the element of animals at 3 (“bass”) starts with a “b”. This value is removed from the list and inserted at index 3. Since it was already at index 3, the list would not change. In the fourth iteration, when k is 2, the element of animals at 2 (“zebra”) does not start with a “b” and no changes are made to the list. In the fifth iteration, when k is 1, the element of animals at 1 (“baboon”) starts with a “b”. It is removed from the list and inserted at index 5. The list would then be {“bear”, “zebra”, “bass”, “cat”, “koala”, “baboon”}. Finally, k decrements to 0 which is not greater than 0 so the loop terminates. . Q13: . Corrections: C is Correct. This algorithm uses an enhanced for loop to assign each element in arr to x. Using the modulus (%) operator to determine the remainder when dividing by 2, each value is checked to see if it is not even. If x is even, then x % 2 will be 0, since there is no remainder when you divide an even number by 2. If x is odd, then x % 2 will not equal 0, it will equal 1. . Q14: . Corrections: E is Correct. The original code segment prints all values between 1 and 100 that are evenly divisible by 4. The following values are printed: 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, and 100. Choice E shows these values can also be printed by having a for loop that has a loop control variable k that starts at 4, increments by 4, and terminates when k is greater than 100. . Q15: . Corrections: C is Correct. Passing a reference parameter results in the formal parameter and the actual parameter being aliases. They both refer to the same object. Any updates made to the referenced array when mystery is called are being made on the single array that is reference by both data and values. The for loop has a loop control variable k that starts at 0, increments by 1 for each iteration, and the loop terminates once k is data.length – 1. In each iteration of the loop, the element at index k + 1 is assigned the sum of the values at index k and k + 1. In the first iteration, data[1] is assigned 5 + 2 (data[[0] + data[1]) or 7. Changing the array referenced by both data and values to be {5, 7, 1, 3, 8}. In the second iteration, data[2] is assigned 8, changing the array to {5, 7, 8, 3, 8}. In the third iteration, data[3] is assigned 11, changing the array to {5, 7, 8, 11, 8}. In the fourth and final iteration, data[4] is assigned 19, changing the array to {5, 7, 8, 11, 19}. Since call by value is used when calling mystery and passing an array, the reference to the array values is passed, meaning data will be assigned this same reference. This establishes an aliasing relationship where both values and data are referencing the same array and no copy of the array is made. Any updates made when mystery is called are being made on the single array that is reference by both data and values. . Q16: . Corrections: E is Correct. The modulus operator (%) evaluates to the remainder when the first operand is divided by the second operand. For example, 2574 % 10 evaluates to 4 the remainder when 2574 is divided by 10. In the first iteration of the loop, result is assigned 0 10 + 2574 % 10 or 0 + 4 or 4. The value of num is updated to 257 since the division is integer division between two int values. In the second iteration, result is assigned 4 10 + 257 % 10 or 40 + 7 or 47 and num is assigned 25. In the third iteration, result is assigned 47 10 + 25 % 10 or 470 + 5 or 475 and num is assigned 2. In the fourth iteration, result is assigned 475 10 + 2 % 10 or 4750 + 2 or 4752 and num is assigned 0. At this point the loop will terminate and 4752 will be printed to the screen. . Q17: . Corrections: C is Correct. The first conditional tests to see if x is even, if it is, y will be assigned the value 3. The value 8 is an even number and will test this condition. If x is not even, then the second test will check if x is greater than 9. If x is an odd number greater than 9, then y will be assigned the value 5. The value 11 is an odd number greater than 9. If x is an odd number but not greater than 9, then y is assigned the value 1. The value 9 is an odd number that is not greater than 9. . Reflection of the Trimester: This trimester, I liked the work I did. I think I need to focus on making sure I&quot;m more efficient in class and less distracted. I enjoyed working with sockets somewhat but I want to do more backend. I think it&#39;s difficult for me to venture into new things in fear that they will not work, and the adjustment of this trimester to school itself was pretty difficult. Next trimester, however, I will align my schedule accordingly. .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2022/11/07/final.html",
            "relUrl": "/jupyter/2022/11/07/final.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "NIGHT AT THE MUSEUM",
            "content": "NIGHT AT THE MUSEUM . PICTURES . . . . . . . . . .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/2022/11/06/N@TM.html",
            "relUrl": "/2022/11/06/N@TM.html",
            "date": " • Nov 6, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Days in a Month Exercise",
            "content": "//Exercise 2: try to create a program to find the number //of days in a month //input a month number and year //outputs how many days that month, year has //hints: think about how many days each month has //split them into dif. days in a month . import java.util.Scanner; public class Main { private static String[] words = {&quot;words&quot;, &quot;to&quot;, &quot;put&quot;, &quot;in&quot;}; private static String word = words[(int) (Math.random() * words.length)]; private static String asterisk = new String(new char[word.length()]).replace(&quot; 0&quot;,&quot;*&quot;); private static int count = 0; public static void main(String[] args) { Scanner sc = new Scanner(System.in); //create a while loop when count is less than 7 and //when asterisk contains * while (count &lt; 7 &amp;&amp; asterisk.contains(&quot;*&quot;)) { //print guess any letter in the word //print asterisk //take in guess and scan it in (string guess and take in scan) //hang(guess) System.out.println(&quot;Guess any letter in the word&quot;); System.out.println(asterisk); String guess = sc.next(); hang(guess); } sc.close(); }} . import java.util.Scanner; public class Main { public static void main(String[] strings) {}} Scanner input = new Scanner(System.in); int number_Of_DaysInMonth = 0; String MonthOfName = &quot;Unknown&quot;; System.out.print(&quot; Input a month number: &quot;); int month = input.nextInt(); System.out.print(month); System.out.print(&quot; Input a year: &quot;); int year = input.nextInt(); System.out.print(year); switch (month) { case 1: MonthOfName = &quot;January&quot;; number_Of_DaysInMonth = 31; break; case 2: MonthOfName = &quot;February&quot;; if ((year % 400 == 0) || ((year % 4 == 0) &amp;&amp; (year % 100 != 0))) { number_Of_DaysInMonth = 29; } else { number_Of_DaysInMonth = 28; } break; case 3: MonthOfName = &quot;March&quot;; number_Of_DaysInMonth = 31; break; case 4: MonthOfName = &quot;April&quot;; number_Of_DaysInMonth = 30; break; case 5: MonthOfName = &quot;May&quot;; number_Of_DaysInMonth = 31; break; case 6: MonthOfName = &quot;June&quot;; number_Of_DaysInMonth = 30; break; case 7: MonthOfName = &quot;July&quot;; number_Of_DaysInMonth = 31; break; case 8: MonthOfName = &quot;August&quot;; number_Of_DaysInMonth = 31; break; case 9: MonthOfName = &quot;September&quot;; number_Of_DaysInMonth = 30; break; case 10: MonthOfName = &quot;October&quot;; number_Of_DaysInMonth = 31; break; case 11: MonthOfName = &quot;November&quot;; number_Of_DaysInMonth = 30; break; case 12: MonthOfName = &quot;December&quot;; number_Of_DaysInMonth = 31;} System.out.print(&quot; &quot; + MonthOfName + &quot; &quot; + year + &quot; has &quot; + number_Of_DaysInMonth + &quot; days n&quot;); . Input a month number: 12 Input a year:2020 December 2020 has 31 days .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2022/11/06/ex5.html",
            "relUrl": "/jupyter/2022/11/06/ex5.html",
            "date": " • Nov 6, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Words Reverse Exercise",
            "content": "// # October 29, 2022 //Exercise 1: //Write a program to reverse the words in a sentence //example: the strawberry cake //becomes: cake strawberry the //hints: use scanner to take in words //use split to break apart words to reverse them //when ready, or want to go over type in chat/tell me import java.util.Scanner; public class Main { // public static void main(String[] args) { Scanner scanner = new Scanner(System.in); } public static String reverse_str_order(String input_sentence) { if (input_sentence == null) { throw new IllegalArgumentException(&quot;Null&quot;); //no empty strings } StringBuilder stringBuilder = new StringBuilder(); String[] words = input_sentence.split(&quot; &quot;); for (int i = words.length - 1; i &gt;= 0; i--) { stringBuilder.append(words[i]); //place words in order if (i != 0) { //keep going until no more words are left stringBuilder.append(&quot; &quot;); } System.out.print(&quot;Input string: &quot; + (input)); //asks for user input String input = scanner.nextLine(); //takes in next line System.out.println(&quot; nResult: &quot; + stringBuilder(words)); } return stringBuilder.toString(); } // public static void main(String[] args) { //prepares for scanning // } . Input string: hey . | System.out.println(&#34; nResult: &#34; + stringBuilder(words)); cannot find symbol symbol: variable words .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2022/11/03/ex4.html",
            "relUrl": "/jupyter/2022/11/03/ex4.html",
            "date": " • Nov 3, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Taking Averages Exercise",
            "content": "// Warmup: try to create a Java program // that takes in any number of inputs // and prints the average of the numbers // example: 5+5+5 = 5 // ask the user to input how many numbers // to find the average of // ask the user to input a number // second #, etc. and then calculate // the average of those numbers // feel free to type in chat for help // or when finished System.out.println(&quot;The average of those numbers are &quot; + //prints out (num1 + num2 +...)/ number you want to divide); //add up the nums and }//num you want to divide is however many numbers you want to average out } import java.util.Scanner; //allows scanners to be in the program public class Main { public static void main(String[] args) { double num = 0; //keeps count num as the total double x = 1; //x starts as 1 when user inputs one number keeps count Scanner sc = new Scanner(System.in); //creates a scanner to allow for input System.out.println(&quot;How many numbers you want to average &quot;); //asks user for input int n = sc.nextInt(); //takes in integers while(x &lt;= n) { //while loop as long as asking integer is less than needed integer System.out.println(&quot;Input your number &quot; + &quot;(&quot;+ (int) x + &quot;)&quot;+&quot;:&quot;); num += sc.nextInt(); //takes in integers and goes to next one (sums up nums) x += 1; //adds 1 to x so once it reaches x=n it will exit loop } double avgn = (num / n); //computes the average System.out.println(&quot;Average:&quot; + avgn); //prints out the output/average }} . | (num1 + num2 +...)/ number you want to divide); illegal start of expression . import java.util.Scanner; //allows scanners to be in program public class Main { public static void main(String[] args) { }} Scanner in = new Scanner(System.in); //creates a scanner System.out.print(&quot;Input 1st number: &quot;); //asks user for input int num1 = in.nextInt(); //saves number and goes to next int System.out.print(&quot;Input 2nd number: &quot;); //same as above int num2 = in.nextInt(); System.out.println(&quot;The average of those numbers are &quot; + (num1 + num2)/(2)); //prints out //num you want to divide is however many numbers you want to average out . Input 1st number: Input 2nd number: The average of those numbers are 4 .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2022/10/30/ex3.html",
            "relUrl": "/jupyter/2022/10/30/ex3.html",
            "date": " • Oct 30, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Odd/Even Exercise",
            "content": "// Warmup // create a java program to check a number // to see if it is even or odd // hint: use parts of last class to help // 8-10 mins.; don&#39;t worry if there are errors // remember to import java scanner // hint 2: use parseInt to change string to int import java.util.Scanner; class Main { public static void main(String[] args) { System.out.println(&quot;Enter a number here: &quot;); Scanner sc = new Scanner(System.in); int number = Integer.parseInt(sc.nextLine()); int x = number % 2; if(x==0){ System.out.println(&quot;The number is even&quot;); } else { System.out.println(&quot;The number is odd&quot;); } } } // Arrays // What are arrays? // store multiple values in a single variable // put same type data into one part // Arrays in Java are also objects. Need to be // declared and then created. In order to declare a variable // that will hold an array of integers, we use the following syntax: int[] arr; arr = new int[34]; // this creates a new array with the size of 34 // Exercise: create three new arrays with three dif. sizes // check an array&#39;s size by printing it: // System.out.println(arr.length); arr[0] = 4; arr[1] = arr[0] + 5; int[] arr = {1, 2, 3, 4, 5} //Loops for (int i = 0; i &lt; 3; i++) {} //write out what the code will output, //what would be running int i = 0; i &lt; 3 //0 &lt; 3 T i++ // adds 1 to 0 i &lt; 3 // 1 &lt; 3 T i++ //adds 1 to 1 i &lt; 3//2 &lt; 3 T i++ //ads 1 to 2 i &lt; 3// 3 &lt; 3 F //Break out of the loop //for loop exercise: //create a java program that loops through //a list and prints out only the even numbers //create an array with numbers //i.e. int[] numbers = {numbers in here}; // do the public class main and public static void public class Main { public static void main(String[] args) { int[] numbers = { 2, 3, 5, 8, 19, 45, 88, 60, 7 }; for (int i = 0; i &lt; numbers.length; i++) { int a = numbers[i]; if (a % 2 == 0) { System.out.println(a); } } } } //While //while(condition) {} . | int[] arr = {1, 2, 3, 4, 5} &#39;;&#39; expected .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2022/10/27/ex2.html",
            "relUrl": "/jupyter/2022/10/27/ex2.html",
            "date": " • Oct 27, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Intro Exercise",
            "content": "public class Main { //any other classes can access when it is public public static void main(String[] args) { //public: anyone can access it //static: run it w/o Main //void: method does not return value //main: name of method System.out.println(&quot;Print this here&quot;); //System: already defined to hold variables &amp; methods //out: static variable for output //println: print a line } } //1. create a short program to print your //name, birthday, hobby, or anything you like //variables &amp; types (identify them) //byte - number; save memory in arrays or used in place //of int //short - number; use to save memory in arrays 16 //int - number; use to represent 32-bit integer 32 //long - number; use when need a range of values 64 //more than those in int //float - float; save memory in large arrays; not for //precise values //double - float; decimal values, not for precise values //char - character; single 16 bit //boolean - true or false; for T or F conditions //try to identify if they are either a number, float, //character or (true or false) //Numbers //to declare and assign a number int aNumber; aNumber = 34; //you can also combine int bNumber; bNumber = 80; //Exercise: declare 2 numbers in each of the methods above //Characters and Strings //character: it is its own type and not just a num //ex: char a = &#39;b&#39; //String: a real type //methods to create a string //1. make it with a constructor String sent1 = new String(&quot;Hello, it&#39;s me&quot;); //2. using the paranthesis String sent2 = &quot;Muhahahaha!&quot;; //to concatenate strings String sent3 = sent1 + sent2; //Exercise: create 2 sentences in each of the methods above //Exercise 2: try to concatenate string and numbers //ex: int num = 90; String = &quot;I have three pineapples here. int num = 90; String sentence = &quot;I have three pineapples here&quot; + num; //Conditionals //try to create if, else for 2 scenarios //first scenario when a and b is equal //print out &quot;they are equal&quot; //else //print out &quot;they are not equal&quot; if (aNumber == bNumber) System.out.println(&quot;they are equal&quot;); else System.out.println(&quot;they are not equal&quot;); // //Exercise 2: if // int aNumber = 100; // int bNumber = 150; // boolean result; // // //will these be T or F? // // aNumber &lt; bNumber; // // aNumber &gt; bNumber; // // aNumber &lt;= 100; // // bNumber &gt;= 151; // // aNumber == b; // // aNumber != b; // // // aNumber &gt; bNumber || aNumber &lt; bNumber // // !result F // String a = new String(&quot;hi&quot;); // String b = new String(&quot;hi&quot;); // String c = a; // boolean s1 = a == b; // boolean s2 = a.equals(b); // boolean s3 = a == c; . they are not equal .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2022/10/23/ex1.html",
            "relUrl": "/jupyter/2022/10/23/ex1.html",
            "date": " • Oct 23, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Title",
            "content": "import java.util.Scanner; public class Checker { public static void main(String[] args) { int number; // Create a Scanner object for keyboard input. Scanner keyboard = new Scanner(System.in); // Get a number from the user. System.out.print(&quot;Enter a number in the range of 1 through 100: &quot;); number = keyboard.nextInt(); while (number&gt;100) { System.out.print(&quot;Invalid input. Enter a number in the range &quot; + &quot;of 1 through 100: &quot;); number = keyboard.nextInt(); } } } . public class LoopConversion { public static void main(String[] args) { int count = 0; //convert to for loop while (count &lt; 5) { System.out.println(&quot;count is &quot; + count); count++; } } } . int i=0; while (i&lt;5) System.out.println(i); i++; .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/2022/10/19/hwiteration.html",
            "relUrl": "/2022/10/19/hwiteration.html",
            "date": " • Oct 19, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Title",
            "content": "function OnLocalStorage () { localStorage.setItem(&#39;template&#39;, document.getElementById(&#39;allComments&#39;).innerHTML); } . | &lt;!DOCTYPE html&gt; &lt;identifier&gt; expected | &lt;!DOCTYPE html&gt; illegal start of type .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/2022/10/10/html.html",
            "relUrl": "/2022/10/10/html.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Arraylists",
            "content": "public class Arraylistexamples { public static void main(String[] args) { ArrayList&lt;String&gt; betterschedulesthread = new ArrayList&lt;&gt;(Arrays.asList(&quot;yea life hasn&#39;t been easy. i&#39;m trying to develop a routine.&quot;, &quot;yo, definitely.&quot;, &quot;wassup! yes, a routine is super important.&quot;)); //part of the dicussions panel within the website; threads/ongoing discussions b/w users //get element System.out.println(betterschedulesthread.get(1)); //get size System.out.println(betterschedulesthread.size()); //add element betterschedulesthread.add(&quot;how can you incorporate exercise into your day?&quot;); System.out.println(betterschedulesthread.get(3)); //set element betterschedulesthread.set(0, &quot;how are you guys!&quot;); System.out.println(betterschedulesthread.get(0)); //isempty betterschedulesthread.isEmpty(); boolean answer = betterschedulesthread.isEmpty(); if (answer == true) System.out.println(&quot;ArrayList is empty&quot;); else System.out.println(&quot;ArrayList is not empty&quot;); //remove element betterschedulesthread.remove(&quot;how can you incorporate exercise into your day?&quot;); System.out.println(betterschedulesthread.get(3)); } } .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2022/10/09/arraylists.html",
            "relUrl": "/jupyter/2022/10/09/arraylists.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Week of 10/3",
            "content": "Scanner input = new Scanner(System.in); System.out.print(&quot;input a location to see the weather: &quot;); String translation = input.nextLine(); System.out.println(&quot;output:&quot; + translation); . input a location to see the weather: output:san diego . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://mental-health-info-api.p.rapidapi.com/news/thetimes&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;8d571b2f72msh44f8fd48e083624p19cce1jsnfb1e373c1716&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;mental-health-info-api.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); . [{&#34;title&#34;:&#34;UK NEWSFormer soldier’s coastal run raises £400,000 for mental health charityAfter surviving two bomb blasts in Iraq and Afghanistan, Paul Minter could be forgiven for wanting a quiet life. ...Tuesday October 04 2022, 5.00pm, The TimesKieran Gair&#34;,&#34;url&#34;:&#34;https://www.thetimes.co.uk/article/former-soldiers-coastal-run-raises-400-000-for-mental-health-charity-rx6r5p22r&#34;,&#34;source&#34;:&#34;thetimes&#34;},{&#34;title&#34;:&#34;GILLIAN BOWDITCHSuicidal children are being failed. The system is brokenA quarter of children referred for specialist help with mental health problems have either tried or thought about...Sunday September 04 2022, 12.01am, The Sunday TimesGillian Bowditch&#34;,&#34;url&#34;:&#34;https://www.thetimes.co.uk/article/suicidal-children-failed-broken-system-scotland-comment-xgtdp0h2b&#34;,&#34;source&#34;:&#34;thetimes&#34;},{&#34;title&#34;:&#34;HEALTHParents go private to get children mental health helpParents are increasingly turning to private health services for support with their children’s mental health...Monday August 08 2022, 12.01am, The TimesKat Lay, Health Editor&#34;,&#34;url&#34;:&#34;https://www.thetimes.co.uk/article/parents-go-private-to-get-children-mental-health-help-72fn9w53n&#34;,&#34;source&#34;:&#34;thetimes&#34;},{&#34;title&#34;:&#34;HEALTHChild mental health crisis ‘holds nation back’The mental health emergency among children is so profound that it threatens the country’s future prosperity, a...Saturday July 30 2022, 12.01am, The TimesJames Beal, Social Affairs Editor&#34;,&#34;url&#34;:&#34;https://www.thetimes.co.uk/article/child-mental-health-crisis-is-holding-england-back-5s8qpzclj&#34;,&#34;source&#34;:&#34;thetimes&#34;},{&#34;title&#34;:&#34;Children attempt suicide as they wait for NHS helpThousands of children and young adults have attempted suicide as a result of long waits for NHS mental health care...Thursday July 21 2022, 12.01am, The TimesKat Lay, Health Editor&#34;,&#34;url&#34;:&#34;https://www.thetimes.co.uk/article/children-attempt-suicide-as-they-wait-for-nhs-help-bgnhslbzc&#34;,&#34;source&#34;:&#34;thetimes&#34;},{&#34;title&#34;:&#34;Video IconHEALTHCost of living risks ‘pandemic-style mental health crisis’The cost of living crisis poses a pandemic-level threat to the nation’s mental wellbeing, one of Britain’s most...Monday June 20 2022, 2.45pm, The TimesKat Lay, Health Editor&#34;,&#34;url&#34;:&#34;https://www.thetimes.co.uk/article/cost-of-living-risks-pandemic-style-mental-health-crisis-lwwcxzlvb&#34;,&#34;source&#34;:&#34;thetimes&#34;},{&#34;title&#34;:&#34;HEALTHMental illness among young at record highA record number of children and young people are being treated for mental health problems. More than 420,000 were...Monday May 23 2022, 12.01am, The TimesCharlie Moloney&#34;,&#34;url&#34;:&#34;https://www.thetimes.co.uk/article/mental-illness-in-children-and-young-people-at-record-high-pz7qn3r2b&#34;,&#34;source&#34;:&#34;thetimes&#34;},{&#34;title&#34;:&#34;UK NEWSBecker ‘mentally strong and doing OK’ in jailBoris Becker is doing “OK” in prison and his mental health is good, but life inside Wandsworth jail is “not a...Wednesday May 04 2022, 9.30am, The TimesKieran Gair&#34;,&#34;url&#34;:&#34;https://www.thetimes.co.uk/article/boris-becker-mentally-strong-and-doing-ok-in-jail-says-wife-s68p2l386&#34;,&#34;source&#34;:&#34;thetimes&#34;}] . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://personality-traits.p.rapidapi.com/personality&quot;)) .header(&quot;content-type&quot;, &quot;application/json&quot;) .header(&quot;Accept&quot;, &quot;application/json&quot;) .header(&quot;X-RapidAPI-Key&quot;, &quot;8d571b2f72msh44f8fd48e083624p19cce1jsnfb1e373c1716&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;personality-traits.p.rapidapi.com&quot;) .method(&quot;POST&quot;, HttpRequest.BodyPublishers.ofString(&quot;[ r n { r n &quot;id &quot;: &quot;1 &quot;, r n &quot;language &quot;: &quot;en &quot;, r n &quot;text &quot;: &quot; &quot; r n } r n]&quot;)) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); . [{&#34;id&#34;:&#34;1&#34;,&#34;predictions&#34;:[{&#34;prediction&#34;:&#34;emotional&#34;,&#34;probability&#34;:0.93342}]}] .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2022/10/03/rapidapi.html",
            "relUrl": "/jupyter/2022/10/03/rapidapi.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Week of 10/3",
            "content": "import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;MonaLisa&quot;; String in = &quot;images/MonaLisa&quot;; String out = &quot;images/tmp/MonaLisa&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . javax.imageio.IIOException: Can&#39;t read input file! at java.desktop/javax.imageio.ImageIO.read(ImageIO.java:1308) at REPL.$JShell$36C$ImageIOTest.main($JShell$36C.java:48) at REPL.$JShell$65.do_it$($JShell$65.java:35) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.base/java.lang.reflect.Method.invoke(Method.java:566) at io.github.spencerpark.ijava.execution.IJavaExecutionControl.lambda$execute$1(IJavaExecutionControl.java:95) at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) at java.base/java.lang.Thread.run(Thread.java:829) . Success . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/MonaLisa&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i=i+3) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics MonaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); MonaLisa.printStats(&quot;Original&quot;); MonaLisa.resize(33); MonaLisa.printStats(&quot;Scaled&quot;); MonaLisa.convertToAscii(); } } Pics.main(null); . Original: 0 0x0 images/MonaLisa.png Scaled: 0 0x0 images/MonaLisa.png . java.lang.NullPointerException: null at Pics.convertToAscii(#32:1) at Pics.main(#32:1) at .(#37:1) .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2022/10/03/ascii.html",
            "relUrl": "/jupyter/2022/10/03/ascii.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
  
    
        ,"post32": {
            "title": "Website Design",
            "content": "Health.ly . Brainwrite . Health.ly is a website dedicated towards mental health in DNHS and focuses on improving student’s mental wellbeing. With the increases in stress throughout high school, as students end up taking higher coursework and end up in loads of extracurriculars– not to mention any personal and familial issues, many students find it hard to deal with the burden it can have on one’s physical and mental health. This was the inspiration towards our website, as we hoped to create a website that is able to help aid any struggling students and let them know that they are not alone. . Our project plan hopes to include the following: chatting, social networking, and mental health resources and tips . Wireframe . . As seen, we have a cover page with a navbar showing 6 buttons which will essentially be our about us, Chats, Tips/Resources, and login/sign up. All of these buttons lead us to different screens with the corresponding information. Our About page talks about our mission statement for the site as well as a brief description of the team members and their roles. Additionally, we also plan to ask the Ap Psych teacher to sponsor us so we’ve left a space for sponsor information . . . . Chats page provides a chat room of sorts for the users to interact with. We are thinking of potentially adding a school wide chat room so that any student from DNHS can access it and talk on it as long as they have an account. One of the things we were thinking of implementing would be to add a more personal account so when you sign up you would be able to jot down any preferences you have and this can help you match up with other like-minded folks which would be a great way to help meet new people and make new friends. . . The Tips/Resources section provides links/numbers to hotlines for various mental health purposes as well as several mental health websites/resources that can be helpful such as advice columns. . . In the future we’re also planning on adding in more to the resources tab such as expanding on the places where users can blog and add in a way to plan out schedules so as to make this site more personal however, currently we’ve just decided to focus more on the interpersonal aspect of this . Some future plans: Articles/blogs to share personal experiences with or about the topic. These Blogs can provide spaces for the users to share their experiences and knowledge about mental health. Additionally, one of the features we hope to implement would be adding an option to decide whether to have it set to private vs public so that our users can decide whether or not they prefer to have a more diary like experience or a more blog like one where they can interact and share with other users. .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/Project/",
            "relUrl": "/Project/",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Week of 9/20",
            "content": "Initial Code with Fibo Class . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } Fibo.main(null); . Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . Fibo in a For Loop Format . We used a for loop to loop through and create a fibonacci sequence. A for loop will loop through a program for as many times listed in the initial condition. . //Using For Loop public class FibonacciFor extends Fibo { public static void main(String[] args) { // Set it to the number of elements you want in the Fibonacci Series int tries = 10; int num1 = 0; int num2 = 1; System.out.print(&quot;Fibonacci Series: &quot;); for (int i = 1; i &lt;= tries; i++) //looping through the numbers until i &lt;= to 10 { System.out.print(num1+&quot; &quot;); /* On each iteration, we are assigning second number * to the first number and assigning the sum of last two * numbers to the second number */ int total = num1 + num2; //Actual Fibo program, adding last and first number together num1 = num2; num2 = total; } Fibo fib = new FibonacciFor(); //Printing code from initial fibo fib.print(); } } FibonacciFor.main(null); . Fibonacci Series: 0 1 1 2 3 5 8 13 21 34 Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . Fibonacci in a While Loop Format . We extended Fibo to create a while loop to loop through and create a fibonacci sequence. The while loop will keep looping as long as a certain boolean value is met. . //Using While Loop public class FibonacciWhile extends Fibo { public static void main(String[] args) { int tries = 10; int num1 = 0; int num2 = 1; System.out.print(&quot;Fibonacci Series: &quot;); //Initial line, basically saying number of numbers int i=1; while(i &lt;= tries) { System.out.print(num1+&quot; &quot;); int total = num1 + num2; num1 = num2; num2 = total; i++; } Fibo fib = new FibonacciWhile(); fib.print(); } } FibonacciWhile.main(null); . Fibonacci Series: 0 1 1 2 3 5 8 13 21 34 Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . Fibonacci Series using Recursion . After extending Fibo, we used recursion to loop through and create a fibonacci sequence. A recursion loop divides an overarching program into mini-programs that can be used to create some kind of output. . //Using Recursion public class FibonacciRecursion extends Fibo { public static int fibonacciRecursion(int a){ if(a == 0){ return 0; } if(a == 1 ){ return 1; } if( a == 2){ return 1; } return fibonacciRecursion(a-2) + fibonacciRecursion(a-1); } public static void main(String args[]) { int tries = 10; System.out.print(&quot;Fibonacci Series of &quot;+tries+&quot; numbers: &quot;); for(int i = 0; i &lt; tries; i++){ System.out.print(fibonacciRecursion(i) +&quot; &quot;); } Fibo fib = new FibonacciRecursion(); fib.print(); } } FibonacciRecursion.main(null); . Fibonacci Series of 10 numbers: 0 1 1 2 3 5 8 13 21 34 Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . Project Idea . Site dedicated to helping Del Norte students manage their mental health better. . // Java program to print greeting class greet { public static void main(String[] args) { System.out.println(&quot;Welcome to Health.ly!&quot;); // line that we are printing } } greet.main(null); // calling the class to use . Welcome to Health.ly! . Meet our team! . Using an array to print members of the team and their jobs on the team. . // Array with list of members and positions String[][] positions = {{&quot;Saumya&quot;, &quot;Scrum Leader&quot;},{&quot;Serafina&quot;, &quot;Deployment&quot;}, {&quot;Armaan&quot;, &quot;Frontend&quot;}, {&quot;Prisha&quot;, &quot;Backend&quot;}}; // Printing out the array values side by side System.out.println(Arrays.deepToString(positions)); . [[Saumya, Scrum Leader], [Serafina, Deployment], [Armaan, Frontend], [Prisha, Backend]] .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2022/09/24/fibo.html",
            "relUrl": "/jupyter/2022/09/24/fibo.html",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Sept 20 Lesson Plan",
            "content": "Brief Review . Loops . Methods . 2018 FRQ #1 Overview . The prompt is essentially a simulation of a frog hopping. The frog can jump back and forth and it is considered a success if it makes it to the goal in the amount of jumps given. . 2018IntroFRQ . 2018 FRQ #1a . Part A: The purpose is to make it so that if we call the method FrogSimulation using FrogSimulation sim = new FrogSimulation(24,5);. The simulation would have a goal at a distance of 24 inches and a maximum amount of 5 jumps. If the frog makes it to or past the goal sim, simulate will return true and if it is negative or has just not made it to the goal but is not a negative value then it will return false. . public class FrogSimulation { private int goalDistance; private int maxHops; public FrogSimulation(int dist, int numHops){ goalDistance=dist; maxHops=numHops; } private int hopDistance(){} public boolean simulate(){} public double runSimulations(int num){} } . 2018 FRQ #1a Solution . First we define location to be at zero, our starting point. Then we use a for loop so that i will continue to increase until it reaches the max number of hops and so that for as long as this happens, the frog will hop (ie. location= location+hopDistance, which means that the distance the frog jumps will be added to location every time the frog jumps in order to have the final location of the frog). After the frog has finished jumping, we used an if loop so that if the frog is at or beyond the goal then it will be true and if it is at a negative value or behind the starting value then it will return false. If the frog has used up all its jumps but has not made it to the goal or at a negative value then it will return false regardless which is done by a return false outside of the for loop. . public boolean simulate(){ int location=0; for (int i=0; i&lt;numHops; i++){ location +=hopDistance(); if(dist&lt;=location){ return true; } else if (location&lt;0){ return false; } } return false; } . 2018 FRQ #1b . Part B: We can then use the values given by the method simulate in order to finish the simulation of the frog. Prompt B is asking for us to finish the simulation and declare whether or not the frog has won the game i.e. made it to the goal, which we can find using the boolean values given by simulate, and then find the proportion of wins overall after a certain number of runs. . 2018 FRQ #1b Solution . This is a method called runSimulations and basically if we call this method such as FrogSimulation run = new FrogSimulation(23); it should run the simulation 23 times and count the number of successes- which will eventually be changed into a decimal of successes/tries. We do this by setting the number of successes to zero to begin with and then we use a for loop, with basically the same idea as part a, so that the code will run for as many times as directed. Then inside of that for loop, we have an if loop so that for as long as simulate runs true then the success counter will increase and the proportion of successes/tries will be returned. . public double runSimulations(int num){ int success=o; for(int i=0; i&lt;num; i++ ){ if(simulate()){ success++ } return success/num } } . 2021 FRQ #1 Overview . The reader is given a class labeled WordMatch which stores a secret string and contains methods to compare other strings to the secret string. In order to fully complete this question, the reader will have to create two methods that fulfill the requirements listed in each part. . Part A: scoreGuess method → comes up with a score for each guess . | Part B: findBetterGuess method → choose best from 2 guesses . | . 2021 FRQ #1a . Compare guess to substring of secret | Uses of substring secret with correct length for comparison with guess | Loops through all necessary substrings of secret | Counts number of identified occurences of guess within secret | Calculate and returns correct final score (algorithm) | . public class WordMatch{ private String secret; public WordMatch(String word){} public int scoreGuess(String guess){ int result = 0; for (int i = 0; a &lt; secret.length(); i++){ if(secret.substring(i).indexOf(guess) == 0){ result++; } } return result + guess.length() + guess.length(); } } . 2021 FRQ #1b . Calls scoreGuess to get scores for guess1 and guess2 | Compares the scores | Determines which guess1 and guess2 is alphabetically greater | Returns the identified guess1 or guess2 (algorithm) | . public String findBetterGuess(String guess1, String guess2){ if(scoreGuess(guess1) &gt; scoreGuess(guess2)){ return guess1; } if(scoreGuess(guess2) &gt; scoreGuess(guess1)){ return guess2; } if(guess1.compareTo(guess2) &gt; 0){ return guess1; } return guess2; } . Array attempts . First attempt is a slight adjustment to the monkey code, making it print horizontally instead of vertical. Second attempt is a soccer array . //Monkey thing but with dogs cuz we love dogs class DogLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] dogs; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Dogs */ public DogLoop() { //Storing Data in 2D arrays dogs = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Dog 1 { &quot; Sunny &quot;, &quot; __ &quot;, //[0][0] eyes &quot; (___()&#39;`;&quot;, //[0][1] chin &quot; /, /` &quot;, //[0][2] body &quot; &#39;- &quot; //[0][3] legs }, //Dog 2 { &quot; Aubrey &quot;, &quot; __ &quot;, //[1][0] &quot; | ______/ V`-,&quot;, &quot; } /~~ &quot;, &quot;/_)^ --,(_| &quot; }, //Dog 3 { &quot; Mari &quot;, &quot; __ _ &quot;, //[2][0] &quot;o&#39;&#39;)}____//&quot;, &quot; `_/ )&quot;, &quot;(_(_/-(_/ &quot; }, //Dog 4 { &quot; Kel &quot;, &quot;^..^ /&quot;, //[3][0] &quot;/_/|_____/ &quot;, &quot; /| /| &quot;, &quot; / | / | &quot; }, //Dog 5 { &quot; Basil &quot;, &quot; &quot;, //[4][0] &quot; ..^____/&quot;, //[4][1] &quot;`-. ___ )&quot;, //[4][2] &quot; || || &quot; //[4][3] }, //Dog 6 { &quot; Hero &quot;, &quot; __&quot;, //[4][0] &quot;(|,--&#39;()&#39;--o&quot;, //[4][1] &quot; (_ ___ /~&#39;&#39;&quot;, //[4][2] &quot; (_)_) (_)_)&quot; //[4][3] }, }; } /** * Loop and print dogs in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Dogs in Kennel Poem in Java Loopy&quot;); // dogs (non-primitive) defined in constructor knows its length int dogCount = dogs.length; int rowCount = 0; for (int i = dogCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of dogs // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; little dogs in the kennel, waiting to find a forever home...&quot;); for (int col = 0; col &lt; dogs[rowCount].length; col++) { for (int row = 0; row &lt; dogCount; row++) { //cycles through &quot;cells&quot; of 2d array // prints specific part of the dog from the column System.out.print(dogs[row][col] + &quot; &quot;); } //this new line gives separation between stanza of poem System.out.println(); } rowCount += 1; //countdown for poem, decrementing dogCount variable by 1 dogCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;Yay! There are no more dogs waiting in the kennel!&quot;); System.out.println(&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new DogLoop().printPoem(); //a new dog list and output in one step } } DogLoop.main(null); . Dogs in Kennel Poem in Java Loopy 6 little dogs in the kennel, waiting to find a forever home... Sunny Aubrey Mari Kel Basil Hero __ __ __ _ ^..^ / __ (___()&#39;`; | ______/ V`-, o&#39;&#39;)}____// /_/|_____/ ..^____/ (|,--&#39;()&#39;--o /, /` } /~~ `_/ ) /| /| `-. ___ ) (_ ___ /~&#39;&#39; &#39;- /_)^ --,(_| (_(_/-(_/ / | / | || || (_)_) (_)_) 5 little dogs in the kennel, waiting to find a forever home... Sunny Aubrey Mari Kel Basil __ __ __ _ ^..^ / (___()&#39;`; | ______/ V`-, o&#39;&#39;)}____// /_/|_____/ ..^____/ /, /` } /~~ `_/ ) /| /| `-. ___ ) &#39;- /_)^ --,(_| (_(_/-(_/ / | / | || || 4 little dogs in the kennel, waiting to find a forever home... Sunny Aubrey Mari Kel __ __ __ _ ^..^ / (___()&#39;`; | ______/ V`-, o&#39;&#39;)}____// /_/|_____/ /, /` } /~~ `_/ ) /| /| &#39;- /_)^ --,(_| (_(_/-(_/ / | / | 3 little dogs in the kennel, waiting to find a forever home... Sunny Aubrey Mari __ __ __ _ (___()&#39;`; | ______/ V`-, o&#39;&#39;)}____// /, /` } /~~ `_/ ) &#39;- /_)^ --,(_| (_(_/-(_/ 2 little dogs in the kennel, waiting to find a forever home... Sunny Aubrey __ __ (___()&#39;`; | ______/ V`-, /, /` } /~~ &#39;- /_)^ --,(_| 1 little dogs in the kennel, waiting to find a forever home... Sunny __ (___()&#39;`; /, /` &#39;- Yay! There are no more dogs waiting in the kennel! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ THE END . class playerLoop { // The area between class definition and the 1st method is where we keep data for object in Java String [][] players; /** * Constructor initializes a 2D array of s */ public playerLoop() { //Storing Data in 2D arrays players = new String[][]{ //Player 0 { &quot; o__&quot;, &quot;/| &quot;, &quot;/ &gt; o&quot; }, //player 1 { &quot; o__&quot;, &quot;/| &quot;, &quot;/ &gt; o&quot; }, //player 2 { &quot; o__&quot;, &quot;/| &quot;, &quot;/ &gt; o&quot; }, //player 3 { &quot; o__&quot;, &quot;/| &quot;, &quot;/ &gt; o&quot; }, //player 4 { &quot; o__&quot;, &quot;/| &quot;, &quot;/ &gt; o&quot; }, }; } /** * Loop and print s in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;The Great Story of the Players Who Shot A Soccer Ball&quot;); System.out.println(&quot;&quot;); // players (non-primitive) defined in constructor knows its length int playerCount = players.length; for (int i = playerCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of players // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; players shooting the ball...&quot;); //how many separate parts are there in a player player? int partCount = players[0].length; for (int row = 0; row &lt; partCount; row++) { //cycles through “cells” of 2d array /*cycles through columns to print each player part by part, will eventually print entire column*/ for (int col = 0; col &lt; playerCount; col++) { // prints specific part of the player from the column System.out.print(players[col][row] + &quot; &quot;); //this is new line between separate parts } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing playerCount variable by 1 System.out.println(&quot;One missed and got benched&quot;); playerCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;No more players shooting in the field&quot;); System.out.println(&quot;&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new playerLoop().printPoem(); //a new player list and output in one step } } playerLoop.main(null); . The Great Story of the Players Who Shot A Soccer Ball 5 players shooting the ball... o__ o__ o__ o__ o__ /| /| /| /| /| / &gt; o / &gt; o / &gt; o / &gt; o / &gt; o One missed and got benched 4 players shooting the ball... o__ o__ o__ o__ /| /| /| /| / &gt; o / &gt; o / &gt; o / &gt; o One missed and got benched 3 players shooting the ball... o__ o__ o__ /| /| /| / &gt; o / &gt; o / &gt; o One missed and got benched 2 players shooting the ball... o__ o__ /| /| / &gt; o / &gt; o One missed and got benched 1 players shooting the ball... o__ /| / &gt; o One missed and got benched No more players shooting in the field THE END .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2022/09/20/lesson.html",
            "relUrl": "/jupyter/2022/09/20/lesson.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "2021 FRQ 1 (Part A and B)",
            "content": "Part a) Write the WordMatch method scoreGuess. To determine the score to be returned, scoreGuess finds the number of times that guess occurs as a substring of secret and then multiplies that number by the square of the length of guess. Occurrences of guess may overlap within secret. . Assume that the length of guess is less than or equal to the length of secret and that guess is not an empty string. . The following examples show declarations of a WordMatch object. The tables show the outcomes of some possible calls to the scoreGuess method. . WordMatch game = new WordMatch(&quot;mississippi&quot;); . public class WordMatch { /** The secret string. */ private String secret; /** Constructs a WordMatch object with the given secret string of lowercase letters. */ public WordMatch(String word) { /* implementation not shown */ } /** Returns a score for guess, as described in part (a). * Precondition: 0 &lt; guess.length() &lt;= secret.length() */ // public int scoreGuess(String guess) public int scoreGuess(String guess) { int result = 0; for (int i = 0; i &lt; secret.length(); i++) { if(secret.substring(i).indexOf(guess) == 0) { result++; } } return result * guess.length() * guess.length(); } // { /* to be implemented in part (a) */ } . Part b) Write the WordMatch method findBetterGuess, which returns the better guess of its two String parameters, guess1 and guess2. If the scoreGuess method returns different values for guess1 and guess2, then the guess with the higher score is returned. If the scoreGuess method returns the same value for guess1 and guess2, then the alphabetically greater guess is returned. . The following example shows a declaration of a WordMatch object and the outcomes of some possible calls to the scoreGuess and findBetterGuess methods. . WordMatch game = new WordMatch(&quot;concatenation&quot;); . /** Returns the better of two guesses, as determined by scoreGuess and the rules for a * tie-breaker that are described in part (b). * Precondition: guess1 and guess2 contain all lowercase letters. * guess1 is not the same as guess2. */ public String findBetterGuess(String guess1, String guess2) { if(scoreGuess(guess1) &gt; scoreGuess(guess2)) { return guess1; } if(scoreGuess(guess2) &gt; scoreGuess(guess1)) { return guess2; } if(guess1.compareTo(guess2) &gt; 0 ) { return guess1; } return guess2; } . Code As A Whole . public class WordMatch { /** The secret string. */ private String secret; /** Constructs a WordMatch object with the given secret string of lowercase letters. */ public WordMatch(String word) { /* implementation not shown */ } /** Returns a score for guess, as described in part (a). * Precondition: 0 &lt; guess.length() &lt;= secret.length() */ public int scoreGuess(String guess) { int result = 0; for (int i = 0; a &lt; secret.length(); i++) { if(secret.substring(i).indexOf(guess) == 0) { result++; } } return result * guess.length() * guess.length(); } // public int scoreGuess(String guess) // { /* to be implemented in part (a) */ } /** Returns the better of two guesses, as determined by scoreGuess and the rules for a * tie-breaker that are described in part (b). * Precondition: guess1 and guess2 contain all lowercase letters. * guess1 is not the same as guess2. */ public String findBetterGuess(String guess1, String guess2) { if(scoreGuess(guess1) &gt; scoreGuess(guess2)) { return guess1; } if(scoreGuess(guess2) &gt; scoreGuess(guess1)) { return guess2; } if(guess1.compareTo(guess2) &gt; 0 ) { return guess1; } return guess2; } } .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/2022/09/20/FRQ2021-1.html",
            "relUrl": "/2022/09/20/FRQ2021-1.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "2018 Frq",
            "content": "Question . The prompt is essentially a simulation of a frog hopping. The frog can jump back and forth and it is considered a success if it makes it to the goal in the amount of jumps given. . public class FrogSimulation { private int goalDistance; private int maxHops; public FrogSimulation(int dist, int numHops){ goalDistance=dist; maxHops=numHops; } private int hopDistance(){} public boolean simulate(){} public double runSimulations(int num){} } . Part A . The distance away from the goal is defined as dist while the number of jumps given is defined as numHops so if we call the method FrogSimulation using FrogSimulation sim= new FrogSimulation(24,5);. The simulation would have a goal at a distance of 24 inches and a maximum amount of 5 jumps. If the frog makes it to or past the goal sim.simulate will return true and if it is negative or has just not made it to the goal but is not a negative value then it will return false . Requirements . Complete method simulate. | Requirement: must use hopDistance | Return true if frog successfully reaches or goes past the goal | . Solution . First we define location to be at zero, our starting point. Then we use a for loop so that i will continue to increase until it reaches the max number of hops and so that for as long as this happens, the frog will hop (ie. location= location+hopDistance, which means that the distance the frog jumps will be added to location every time the frog jumps in order to have the final location of the frog). After the frog has finished jumping, we used an if loop so that if the frog is at or beyond the goal then it will be true and if it is at a negative value or behind the starting value then it will return false. If the frog has used up all its jumps but has not made it to the goal or at a negative value then it will return false regardless which is done by a return false outside of the for loop. . public boolean simulate(){ int location=0; for (int i=0; i&lt;numHops; i++ ){ location +=hopDistance(); if(dist&lt;=location){ return true; } else if (location&lt;0){ return false; } } return false; } . Part B . We can then use the values given by the method simulate in order to finish the simulation of the frog. Prompt B is asking for us to finish the simulation and declare whether or not the frog has won the game ie made it to the goal, which we can find using the boolean values given by simulate, and then find the proportion of wins overall after a certain number of runs. . Requirements . Complete runSimulations method to do a certain amount of runs and then output the proportion of simulations where the frog reaches the goal | . Solution . This is a method called runSimulations and basically if we call this method such as FrogSimulation run = new FrogSimulation(23); it should run the simulation 23 times and count the number of successes- which will eventually be changed into a decimal of successes/tries. We do this by setting the number of successes to zero to begin with and then we use a for loop, with basically the same idea as part a, so that the code will run for as many times as directed. Then inside of that for loop, we have an if loop so that for as long as simulate runs true then the success counter will increase and the proportion of successes/tries will be returned . public double runSimulations(int num){ int success=0; for(int i=0; i&lt;num; i++ ){ if(simulate()){ success++ } return success/num; } } .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/2022/09/20/2018frq.html",
            "relUrl": "/2022/09/20/2018frq.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Video Notes",
            "content": "Video Notes . culture has molded stress | stress takes its toll and it takes its toll in a way the students don’t sometimes want to admit and that’s what | students are so depressed these days and feel lonely | research shows that we can control a lot more of our happiness | all good things in life start by taking control | when looking at enterprise, you must recognize that intuition doesn’t work work; mind is often lying to you | people who seek out material aspirations are actually statistically more likely to have lower well-being than people who tend not to seek out material aspirations | we need to embrace if we’re gonna embark on what we need to do | helping others helps us more than we think | make time for gratitude | half hour of cardio exercise every day is equivalent to taking an anti-depression medication on the market just a half hour a day | benefiting our physical health is also benefiting our mental health | take time to be in the present moment | become affluent not in wealth but in time | . Things to be grateful for: . family | friends | a comfortable home | people to provide for you | an education | the accessibility to AP and honors classes | a comfortable living (money) | the ability to read, write, see, etc. | the ability to make connections | the ability to travel | rights. all amendments passed. | history and legacy | medicine and healthcare | clothing | electricity | clean water | .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/markdown/2022/09/12/speakernotes.html",
            "relUrl": "/markdown/2022/09/12/speakernotes.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "If-Statements and Booleans",
            "content": "What is an if statement? An if statement is used to specify a block of Java code to be executed if a condition is true. . if-else . Uses keyword “if” | Checks if statement is true | If it is, performs certain task | if not, performs else command | . if-else-else Use the else if statement to specify a new condition if the first condition is false. . Conditionals: allows the computer to make decisions based on if a statement is true or false . If | Else | Else If | Booleans | . if (3.14 &gt; 1.5) { //the program decides whether this is true or not System.out.println(&quot;3.14 is greater than 1.5&quot;); //if it is then this line is printed } . 3.14 is greater than 1.5 . What is an if/else statement? The if/else statement executes a block of code if a specified condition is true. If the condition is false, another block of code can be executed. . int time = 12; //set variable if (time &lt; 12) { //the program decides whether this is true or not System.out.println(&quot;Good day.&quot;); //if it is then print this line } else { System.out.println(&quot;Good evening.&quot;); //if it is not then print this } . Good evening. . What is an If-else-else Statement? . int time = 12; if (time &lt; 12) { //the program decides whether this is true or not System.out.println(&quot;Good morning.&quot;); //if it is then print this line } else if (time &lt; 20) { //if it is not true, then check if this is true System.out.println(&quot;Good day.&quot;); //if it is then print this line } else { System.out.println(&quot;Good night.&quot;); //or else print this line } . Good day. . if (1 &gt; 2) { System.out.println(&quot;3.14 is greater than 1.5&quot;); } else if(3 &lt; 1.5) { System.out.println(&quot;3.14 is less than 1.5&quot;); } else if (7 &gt; 8) { System.out.println(&quot;8 is greater than 7&quot;); } else if (6 &lt; 8) { System.out.println(&quot;7 is less than 8&quot;); } else { System.out.println(&quot;Invalid&quot;); } . 7 is less than 8 . What is a Switch Case Program in Java? Java switch statement executes one statement from multiple conditions. . The switch statement evaluates an expression, matching the expression&#39;s value against a series of case clauses, and executes statements after the first case clause with a matching value, until a break statement is encountered. The default clause of a switch statement will be jumped to if no case matches the expression&#39;s value. | . System.out.print(&quot;Enter first number- &quot;); String something = input.nextLine(); // Read user input System.out.println(something); Scanner sc= new Scanner(System.in); int x= sc.nextInt(); String output; switch (x) { case 1: output = x + &quot; &gt; 0&quot;; break; case 2: output = x + &quot; &gt; 8&quot;; break; case 3: output = x + &quot; &gt; 3&quot;; break; case 4: output = x + &quot; &gt; 6&quot;; break; } System.out.println(output) . Enter first number- 1 1 &gt; 0 . De Morgan&#39;s Law The complement of the union of two sets is the intersection of their complements and the complement of the intersection of two sets is the union of their complements. . || means &quot;or&quot; and the &amp;&amp; means &quot;and&quot; ! = not . boolean playBasketball = false; boolean playBaseball = true; if (!(playBaseball &amp;&amp; playBasketball)){ System.out.println(&quot;I play baseball but not basketball&quot;); } else{ System.out.println(&quot;I play basketball but not baseball&quot;); } . I play baseball but not basketball . boolean playBasketball = false; boolean playBaseball = true; if (!playBaseball||!playBasketball){ System.out.println(&quot;I play basketball but not baseball&quot;); } else{ System.out.println(&quot;I play baseball but not basketball&quot;); } . I play basketball but not baseball .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2022/09/12/ifstates.html",
            "relUrl": "/jupyter/2022/09/12/ifstates.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Code.Org Vocab",
            "content": "class - a programmer-defined blueprint from which objects are created inheritance hierarchy - where a class serves as a superclass for more than one subclass | . | constructor - a block of code that has the same name as the class . and tells the computer how to create a new object | . | debugging - identifying + fixing problems in an algorithm or program . | instantiate - to call the constructor to create an object . | object - an instance of a class . attribute - a characteristic of an object | behavior - an action that an object can perform | object-oriented programming - an approach to creating and using models of physical or imagined objects | state - the attributes of an object that are represented by its instance variables | . | methods . method signature - consists of a name and parameter list | method decomp. - the process of breaking a problem down into smaller parts to write methods for each part | . | constructor signature - the first line of the constructor which includes the public keyword, the constructor name, and the values to specify when an object is created . | inheritance - an object-oriented programming principle where a subclass inherits the attributes and behaviors of a superclass | subclass - a class that extends a superclass and inherits its attributes and behaviors | superclass - a class that can be extended to create subclasses | edge case - a bug that occurs at the highest or lowest end of a range of possible values or in extreme situations | redundant code - code that is unnecessary; reiterates the same point | .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2022/09/06/vocabweek2.html",
            "relUrl": "/jupyter/2022/09/06/vocabweek2.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Classic Snake Game",
            "content": "| Menu | Calculator | Snake Game | Photo Carousel | . Snake score: 0 . . Welcome to Snake, press space to begin . new game settings Game Over, press space to try again . new game settings Settings Screen, press space to go back to playing . new game Speed: Slow Normal Fast . Wall: On Off .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/frontend12/snake",
            "relUrl": "/frontend12/snake",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Calculator Starters",
            "content": "| Menu | Calculator | Snake Game | Photo Carousel | . 0 1 2 3 + 4 5 6 - 7 8 9 * A/C 0 . A/C 0 . √ sin cos tan ^ Degrees Radians =",
            "url": "https://saumyapalk23.github.io/saumyafastpages/frontend12/calculator",
            "relUrl": "/frontend12/calculator",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Documentation/Analysis",
            "content": "Class . basic building block | must be given keyword &quot;class&quot; in java (at the top) followed by class name | followed by methods and variables | . | class declaration includes: Modifiers: A class can be public or has default access. | class keyword: The class keyword is used to create a class. | Class name: The name must begin with an initial letter (capitalized by convention). | Superclass (if any): The name of the class&#39;s parent (superclass), if any, preceded by the keyword extends. A class can only extend (subclass) one parent. | Interfaces (if any): A comma-separated list of interfaces implemented by the class, if any, preceded by the keyword implements. A class can implement more than one interface. | Body: The class body surrounded by braces, { }. | . | . //to create a class public class Main { int x = 5; } . //multiple classes class Second { public static void main(String[] args) { Main myObj = new Main(); System.out.println(myObj.x); } } . Instance of a Object . non-static variables defined outside any method, constructor, block, etc. | has a separate copy or instance | belongs to a class | instance variables are in the class but outside methods | have different defaults that are later specified | can only be used when an object is made | is destroyed with the object it&#39;s assoc. with | not necessary to be initialized | accessible in the same class that declares them | cannot be declared static, abstract, etc. only final and transient | can be any fof the four java modifiers: private, public, protected, and default | . | include: boolean, byte, short, int, double, float, long, Object, char | . //to create an object public class Main { int x = 5; public static void main(String[] args) { Main myObj = new Main(); System.out.println(myObj.x); } } . //multiple objects public class Main { int x = 5; public static void main(String[] args) { Main myObj1 = new Main(); // Object 1 Main myObj2 = new Main(); // Object 2 System.out.println(myObj1.x); System.out.println(myObj2.x); } } . Methods . a block of code only running when called | used to pass data, (parameters) | perform actions, known also as functions | reuse code and define the code once to use repetitively | in the example below: myMethod() = name of method | static --&gt; means that the method belongs to the Main class and not an object of the Main class. | void --&gt; this method doesn&#39;t return a value | . | to call a method, write the method&#39;s name w/ 2 parentheses and a semicolon | . //basic method syntax public class Main { static void myMethod() { // code to be executed } } . //calling a method public class Main { static void myMethod() { System.out.println(&quot;I just got hired!&quot;); } public static void main(String[] args) { myMethod(); } } // Outputs &quot;I just got hired!&quot; . Object Mutation . faults inserted into a program that distinguish the mutant from the original program | certain objects are mutable vs. immutable | strings are immutable; will always rep. the same string but StringBuilder is mutable; it has methods to delete, insert, or replace characters | . | mutable types seem more powerful than immutable ones mutable is safer from bugs than immutable | easier to understand than immutable | . | . Console vs. GUI vs. Code.org . console: console class in java provides methods to access character-based console device | GUI = graphical user interface; graphical representation where users interact w/ software/devices through clickable icons | CLI: console/text/character based representation where user types commands into a terminal to operate or navigate the software/devices | Code.org: thus is CLI; typing of commands, character-based | .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2022/09/05/documentanalysis.html",
            "relUrl": "/jupyter/2022/09/05/documentanalysis.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Flashcards",
            "content": "public class QuestionBank { //array of question private String textQuestion[] = { &quot;What year was the DOI signed?&quot;, &quot;What saved the capitol during the War of 1812?&quot;, &quot;Who was the 2nd President of the US?&quot;, &quot;Who was mainly involved in the corrupt bargain?&quot; }; // multiple choice for each question private String multipleChoice[][]= { {&quot;1776&quot;,&quot;1729&quot;,&quot;1830&quot;}, {&quot;Tornado&quot;,&quot;Earthquake&quot;,&quot;Thunderstorm&quot;}, {&quot;John Adams&quot;,&quot;Thomas Jefferson&quot;,&quot;Benjamin Harrison&quot;}, {&quot;Abraham Lincoln&quot;,&quot;John Quincy Adams&quot;,&quot;Ulysses S. Grant&quot;}, }; // arraqy of correct question answer private String mCorrectAnswer[] = {&quot;1776&quot;, &quot;Thunderstorm&quot;, &quot;John Adams&quot;, &quot;John Quincy Adams&quot;}; //method for get number of question public int getLength(){ return textQuestion.length; } public String getQuestion(int a){ String question = textQuestion[a]; return question; } //return single multiple choice item int list 1 2 3 4 as an argument public String getChoice(int index, int num){ String choice = multipleChoice[index][num-1]; return choice; } public String getCorrectAnswer(int a){ String answer = mCorrectAnswer[a]; return answer; } } . / imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // HashMap&lt;Integer, String&gt; hMapNumbers = new HashMap&lt;Integer, String&gt;(); // hMapNumbers.put(1, &quot;One&quot;); // hMapNumbers.put(2, &quot;Two&quot;); // hMapNumbers.put(3, &quot;Three&quot;); public final String[][] QUESTIONS = { // 2D Array of ANSI Terminal Colors {&quot;What year was the DOI signed?&quot;, &quot;1776&quot;}, {&quot;What saved the capitol during the War of 1812?&quot;, &quot;Thunderstorm&quot;}, {&quot;Who was the 2nd President of the US?&quot;, &quot;John Adams&quot;}, {&quot;Who was mainly involved in the corrupt bargain?&quot;, &quot;John Qunicy Adams&quot;}, }; // 2D column location for data public final int TITLE = 0; public final int VALUE = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;4 - History Quiz&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 20; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;#&quot;); } break; case 4: for(int i = 0; i &lt; QUESTIONS.length; i++) // loop through COLORS array System.out.print(QUESTIONS[i][TITLE]); for(int i = 0; i &lt; QUESTIONS.length; i++) // loop through COLORS array System.out.print(QUESTIONS[i][VALUE]); // hMapNumbers.entrySet().forEach( entry -&gt; { // System.out.println( entry.getKey() + &quot; =&gt; &quot; + entry.getValue() ); // }); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); white_check_mark eyes raised_hands . - Choose from these choices - 1 - Say Hello 2 - Output colors 3 - Loading in color 4 - History Quiz 0 - Quit - 4: What year was the DOI signed?What saved the capitol during the War of 1812?Who was the 2nd President of the US?Who was mainly involved in the corrupt bargain?1776ThunderstormJohn AdamsJohn Qunicy Adams .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2022/09/04/flashcards.html",
            "relUrl": "/jupyter/2022/09/04/flashcards.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Console Based Menu",
            "content": "// imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 20; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;#&quot;); } break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . import java.awt.*; import java.awt.event.*; import javax.swing.*; import java.util.Timer; import java.util.TimerTask; // Graphical-User-Interface for Desktop in Java using Java Swing. public class MenuJFrame extends JFrame implements ActionListener { private JFrame frame; private JMenuBar menubar; private JMenu menu; private JLabel message = new JLabel(&quot;Click on Menu to select an action.&quot;); public final String[] MENUS = { // 1D Array of Menu Choices &quot;Hello&quot;, &quot;Colors&quot;, &quot;Loading bar&quot;, }; // Statics to assist with timer and messaging, single copy (no instance) private static int delay = 20; private static int step = 1; private static String hashes = &quot;&quot;; // Constructor enables the Frame instance, the object &quot;this.frame&quot; public MenuJFrame(String title) { // Initializing Key Objects frame = new JFrame(title); menubar = new JMenuBar(); menu = new JMenu(&quot;Menu&quot;); // Initializing Menu objects and adding actions for (String mx : MENUS) { JMenuItem m = new JMenuItem(mx); m.addActionListener(this); menu.add(m); } // Adding / Connecting Objects menubar.add(menu); frame.setJMenuBar(menubar); frame.add(message); // Sets JFrame close operation to Class variable JFrame.EXIT_ON_CLOSE frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // set the size of window based on objects frame.setSize(300,200); // makes the frame object visible according to properties previously set frame.setVisible(true); // flow of control shifts to frame object } // event from user selecting a menu option public void actionPerformed(ActionEvent e) { // local variable to ActinEvent String selection = e.getActionCommand(); // menu selection String msg; // local variable to create response from action final String[] COLORS = {&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;}; // add more colors here final String start_msg = &quot;&lt;html&gt;&quot;; // html building final String end_msg = &quot;&lt;/html&gt;&quot;; final String hash = &quot;#&quot;; // run code based on the menuItem that was selected if ( selection.equals(MENUS[0]) ) { // Hello Action msg = &quot;Hello, World&quot;; message.setText(msg); } else if ( selection.equals(MENUS[1]) ) { // Color Action msg = start_msg + &quot;&lt;p&gt;&quot; + selection + &quot;&lt;/p&gt;&quot;; for (String color : COLORS) { msg += &quot;&lt;font color=&quot; + color + &quot;&gt;&quot; + color + &quot; &lt;/font&gt;&quot;; } msg += end_msg; message.setText(msg); } else { // Loading Bar Action String loading = &quot;&lt;p&gt;Loading&lt;/p&gt;&quot;; // Code to run on a Timer Timer timer = new Timer(); TimerTask task = new TimerTask() { public void run() { // Method for TimerTask // Static and Local variables used to manage message building int random = (int) (Math.random() * COLORS.length); // random logic MenuJFrame.hashes += &quot;&lt;font color=&quot; + COLORS[random] + &quot;&gt;&quot; + hash + &quot;&lt;/font&gt;&quot;; String msg = start_msg + loading + hashes + end_msg; message.setText(msg); // Shutdown timer and reset data if(MenuJFrame.step++ &gt; MenuJFrame.delay) { MenuJFrame.step = 1; MenuJFrame.hashes=&quot;&quot;; timer.cancel(); } }; }; // Schedule task and interval timer.schedule(task, 200, 200); message.setText(start_msg + loading + hash + end_msg); // prime/initial display } } // Driver turn over control the GUI public static void main(String[] args) { // Activates an instance of MenuJFrame class, which makes a JFrame object new MenuJFrame(&quot;Menu&quot;); } } MenuJFrame.main(null); .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2022/09/02/console.html",
            "relUrl": "/jupyter/2022/09/02/console.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "GPA Calculator",
            "content": "public class GPACalc { // instantiation of obj public GradeCalculator() { this.grades = new gradelist&lt;&gt;(); this.enterGrades(); } private boolean isZero(double value){ double threshold = 0.001; return value &gt;= -threshold &amp;&amp; value &lt;= threshold; } // enterGrades input method using scanner private void enterGrades() { Scanner input; while (true) { input = new Scanner(System.in); System.out.print(&quot;Enter a double, 0 to exit: &quot;); try { double sampleInputDouble = input.nextDouble(); System.out.println(sampleInputDouble); if (isZero(sampleInputDouble)) break; // exit loop on isZero else this.grades.add(sampleInputDouble); // adding to object, ArrayList grades } catch (Exception e) { // if not a number System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); } } // calculate for the average public double average() { double total = 0; // running total for (double num : this.grades) { // enhanced for loop total += num; // shortcut add and assign operator } return (total / this.grades.size()); // double math, ArrayList grades object maintains its size } // static main method, used as driver and tester public static void main(String[] args) { GradeCalculator grades = new GradeCalculator(); // calls constructor, creates object, which calls enterGrades System.out.println(&quot;Average: &quot; + String.format(&quot;%.2f&quot;, grades.average())); // format used to standardize to two decimal points } } // IJava activation GradeCalculator.main(null); white_check_mark eyes raised_hands .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2022/08/30/grdclc.html",
            "relUrl": "/jupyter/2022/08/30/grdclc.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Extra Credit From Alumni Meeting (8/29)",
            "content": "Life In College/Insight . functions/programs/algorithms are such an experience to work with (visible with Colin’s experience in 3d modeling and Mabel’s experience with visualizing data in their respective mechanical and aerospace majors) | Working with API’s, JS, HTML, python, etc | CS helps a lot (internships, and basics) | Logical thinking is extremely important | Data visualizations include: Sorting algorithms, graph theory, etc. for visualizing | Data manipulation visible in mechanical engineering | Cam or computation-aided manufacturing | Simulations for materials that are done by hand and have to be converted into actual functions -- after further setup of resources, goal is to run those computations | | . | As for cognitive science, or the graphical design aspect w/ web development: design, ux ui (user interface/interaction) are very important | CSP gave a slight technical background (with CSS, HTML, etc.) | . | APCSA – Teaches you how to apply skills to real-world problems | Nitya’s example: Covid-19 Database Project when the pandemic hit during her year | . | . Advice &amp; Main Takeaways . Keep motivating yourself. Github is difficult to use sometimes and errors are consistent. There is ALWAYS a solution to a problem and an answer to a question. Use Google, use your teachers. Very important to utilize your resources. | | Clashing egos are difficult to encounter. CS Majors are often people to brag or talk about their accomplishments in excessive detail. It is important to not let that go to your head, and to instead take it as a seed of motivation to try harder. . | Focus on your path, and follow your own curve. The theory behind computer science is very different in college and the way that APCSA/P are structured is much more straightforward than it will be in college; it is thus important to use what you learned in highschool and apply to college. | | It is important to learn how to flowchart things and learn how to logically move through problems. | Fighting the temptation to BS -- hard work will turn out in the end. It is important to stop cutting corners and put everything in a box as a necessity to get points vs. actually learning the context and expanding thinking. | | Getting started in new areas is difficult. It’s difficult to get rid of structure that people are put in when they are organized and fixed. But CS Is many different ideas put together, and there are many PBL scenarios in college CS classes. One has to adapt to fit them al. . | In Colin’s case, there is one hands-on project freshman year and one senior year. All skills require PBL skills such as scrum methodology and collaboration. While the classes are more theory-based, many principles are continued. It is important to study in groups, work w/ others when you first arrive to college and as much as possible when you can to build relationships and to help understand better. . | Like everywhere, it is difficult to collaborate in college too, because it may be hard to understand content and your groups may not contribute enough. It is imperative to figure out efficiency. . | Menial tasks can be applied in many majors: copying/pasting, converting data types, word to spreadsheet, etc. | Take input convert into other input (write a script) | . | Coding is really everywhere | . | It’s important to take the wheel or offer: “I can code this part” | . | This doesn’t JUST apply to coding; problem-solving, cognitive and logical thinking | . | Math courses also help w cs | Math libraries in python | . | Jupyter notebooks; used in college a lot . | Cognitive Science | Uses stats, psychology courses, + programming | . | Inevitably you’re going to have to do programming | . | think about how you stack up against the other competitors; What makes YOU unique? | programming is useful in a multitude of different fields | personal projects can help you learn more and challenge yourself | . Connections . Use resume for internships | Internships at Northrop Grumman | Ask professors if there are spaces for you | Anthony – works @ Codeninjas | Opportunities; Cybersecurity intern: technical revisions, diagrams, etc. at Northrop Grumman | Triton AI, Club @ ucsd, which work on autonomous cars | Triton clubs that do ocean surveillance for the navy (Northrop Grumman) | A resume done by early Sep to get an internship by summer (generally open up in the fall) | Open a linkedin | Ask local/smaller company for highschool interns ‘ | .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/markdown/2022/08/29/extracred.html",
            "relUrl": "/markdown/2022/08/29/extracred.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "Primitives Notebook",
            "content": "Fastpages Primitives Notes/Learning Captured . Primitives Notes . set of data types | in CSA exam; consist of int, boolean, double int; integer | boolean; true/false | double; stores floating pt numbers | . | includes variables | . public class DefinePrimitives { public static void main(String[] args) { int anInt = 100; double aDouble = 89.9; boolean aBoolean = true; // not primitives but essential String aString = &quot;Hello, World!&quot;; // wrapper class shortcut assignment String aStringFormal = new String(&quot;Greetings, World!&quot;); System.out.println(&quot;anInt: &quot; + anInt); System.out.println(&quot;aDouble: &quot; + aDouble); System.out.println(&quot;aBoolean: &quot; + aBoolean); System.out.println(&quot;aString: &quot; + aString); System.out.println(&quot;aStringFormal: &quot; + aStringFormal); } } DefinePrimitives.main(null) . // java style to import library import java.util.Scanner; // class must alway have 1st letter as uppercase, CamelCase is Java Class convention public class ScanPrimitives { public static void main(String[] args) { Scanner input; // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter an integer: &quot;); try { int sampleInputInt = input.nextInt(); System.out.println(sampleInputInt); } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // primitive double input = new Scanner(System.in); System.out.print(&quot;Enter a double: &quot;); try { double sampleInputDouble = input.nextDouble(); System.out.println(sampleInputDouble); } catch (Exception e) { // if not a number System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); // primitive boolean input = new Scanner(System.in); System.out.print(&quot;Enter a boolean: &quot;); try { boolean sampleInputBoolean = input.nextBoolean(); System.out.println(sampleInputBoolean); } catch (Exception e) { // if not true or false System.out.println(&quot;Not an boolean (true or false), &quot; + e); } input.close(); // wrapper class String input = new Scanner(System.in); System.out.print(&quot;Enter a String: &quot;); try { String sampleInputString = input.nextLine(); System.out.println(sampleInputString); } catch (Exception e) { // this may never happen System.out.println(&quot;Not an String, &quot; + e); } input.close(); } } ScanPrimitives.main(null); . public class PrimitiveDivision { public static void main(String[] args) { int i1 = 7, i2 = 2; System.out.println(&quot;Integer Division&quot;); System.out.println(&quot; tint output with concatenation: &quot; + i1 + &quot;/&quot; + i2 + &quot; = &quot; + i1/i2); System.out.println(String.format(&quot; tint output with format: %d/%d = %d&quot;,i1, i2, i1/i2)); System.out.printf(&quot; tint output with printf: %d/%d = %d n&quot;,i1, i2, i1/i2); double d1 = 7, d2 = 2; System.out.println(&quot;Double Division&quot;); System.out.println(&quot; tdouble output with concatenation: &quot; + d1 + &quot;/&quot; + d2 + &quot; = &quot; + d1/d2); System.out.println(String.format(&quot; tdouble output with format: %.2f/%.2f = %.2f&quot;,d1, d2, d1/d2)); System.out.printf(&quot; tdouble output with printf: %.2f/%.2f = %.2f n&quot;,d1, d2, d1/d2); System.out.println(&quot;Casting and Remainders&quot;); System.out.printf(&quot; tint cast to double on division: %d/%d = %.2f n&quot;,i1, i2, i1/(double)i2); System.out.println(&quot; tint using modulo for remainder: &quot; + i1 + &quot;/&quot; + i2 + &quot; = &quot; + i1/i2 + &quot; remainder &quot; + i1%i2); } } PrimitiveDivision.main(null); . public class GradeCalculator { // introduction to Double wrapper class (object) ArrayList&lt;Double&gt; grades; // similar to Python list // constructor, initializes ArrayList and call enterGrades method public GradeCalculator() { this.grades = new ArrayList&lt;&gt;(); this.enterGrades(); } // double requires test for zero versus threshold, DO NOT compare to Zero private boolean isZero(double value){ double threshold = 0.001; return value &gt;= -threshold &amp;&amp; value &lt;= threshold; } // enterGrades input method using scanner private void enterGrades() { Scanner input; while (true) { input = new Scanner(System.in); System.out.print(&quot;Enter a double, 0 to exit: &quot;); try { double sampleInputDouble = input.nextDouble(); System.out.println(sampleInputDouble); if (isZero(sampleInputDouble)) break; // exit loop on isZero else this.grades.add(sampleInputDouble); // adding to object, ArrayList grades } catch (Exception e) { // if not a number System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); } } // average calculation public double average() { double total = 0; // running total for (double num : this.grades) { // enhanced for loop total += num; // shortcut add and assign operator } return (total / this.grades.size()); // double math, ArrayList grades object maintains its size } // static main method, used as driver and tester public static void main(String[] args) { GradeCalculator grades = new GradeCalculator(); // calls constructor, creates object, which calls enterGrades System.out.println(&quot;Average: &quot; + String.format(&quot;%.2f&quot;, grades.average())); // format used to standardize to two decimal points } } // IJava activation GradeCalculator.main(null); . Enter a double, 0 to exit: .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2022/08/28/primitives.html",
            "relUrl": "/jupyter/2022/08/28/primitives.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "Blog Notes",
            "content": "bash kernel notes . bash allows users to interact with basic commands | . | run through terminal | . | executes linux commands | . | | . | . java (code.org) learnings . variables | in Java, variables are a mechanism to store values. There are different types of variables – the most commonly used variables are listed below: | . | A boolean is one of two values: true or false. _* * Example instantiation: boolean done = false; | . | An int stores whole numbers (no decimals). _* * Example instantiation: int x = 1; _* * A double stores decimals with up to 15 digits of precision. _* * Example instantiation: double y = -1.479582834; | . | A String stores text using double quotes “”. _* * Example instantiation: String name = “Sam”; | . | . the main method . main method; where program starts running | . | public: The method needs to be public for the JVM to identify it. | . | static: static in this context means that there will be only one type of this method and that it will be shared. | . | when we call the main method, it does not require a new instantiated object – it can be called without the creation of a new object. | . | void: There is nothing returned from the main method. | . | main: The general signature of the main method that is identified by the JVM to execute any program from start to finish. | . | String[] args: The main method’s argument (or input parameter) is an array of type String. This allows the method to accept command line arguments, which are stored as Strings in this variable. The name args can be changed. | . | . inheritance . superclass: the class that the new class inherits from is generally called the parent or super class | . | subclass: the class that inherits from the superclass | . | We use the extends keyword to explicitly state the superclass. | . | .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/markdown/2022/08/28/blogbash.html",
            "relUrl": "/markdown/2022/08/28/blogbash.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Bash Notebook",
            "content": "Project Directory Prerequisites . echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/csp # change vscode to different name to test git clone export project=$project_dir/sjavaproject # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/saumyapalk23/saumyafastpages.git&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Using conditional statement to create a project directory and project Directory /home/spalak06/csp exists. Directory /home/spalak06/csp/sjavaproject does not exists... cloning https://github.com/saumyapalk23/saumyafastpages.git fatal: destination path &#39;saumyafastpages&#39; already exists and is not an empty directory. Directory /home/spalak06/csp/sjavaproject exists. . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project pwd echo &quot;&quot; echo &quot;list top level or root of files with project pulled from github&quot; ls echo &quot;&quot; echo &quot;list again with hidden files pulled from github&quot; ls -a # hidden files flag, many shell commands have flags echo &quot;&quot; echo &quot;list all files in long format&quot; ls -al # all files and long listing . Navigate to project, then navigate to area wwhere files were cloned bash: cd: /home/spalak06/csp/sjavaproject: No such file or directory /home/spalak06 list top level or root of files with project pulled from github Anaconda3-2022.05-Linux-x86_64.sh anaconda3 csp lib vscode Anaconda3-2022.05-Linux-x86_64.sh.1 bin etc saumyafastpages list again with hidden files pulled from github . .landscape .wget-hsts .. .local Anaconda3-2022.05-Linux-x86_64.sh .bash_history .m2 Anaconda3-2022.05-Linux-x86_64.sh.1 .bash_logout .motd_shown anaconda3 .bashrc .node-gyp bin .cache .npm csp .conda .npmrc etc .config .profile lib .gitconfig .sts4 saumyafastpages .ipython .sudo_as_admin_successful vscode .jupyter .vscode-server list all files in long format total 1349352 drwxr-xr-x 1 spalak06 spalak06 4096 Aug 28 15:37 . drwxr-xr-x 1 root root 4096 Aug 19 04:04 .. -rw- 1 spalak06 spalak06 19997 Aug 28 17:07 .bash_history -rw-r--r-- 1 spalak06 spalak06 220 Aug 19 04:04 .bash_logout -rw-r--r-- 1 spalak06 spalak06 4258 Aug 19 09:42 .bashrc drwxr-xr-x 1 spalak06 spalak06 4096 Aug 25 09:03 .cache drwxr-xr-x 1 spalak06 spalak06 4096 Aug 19 09:36 .conda drwxr-xr-x 1 spalak06 spalak06 4096 Aug 23 09:23 .config -rw-r--r-- 1 spalak06 spalak06 49 Aug 19 08:41 .gitconfig drwxr-xr-x 1 spalak06 spalak06 4096 Aug 22 09:32 .ipython drwxr-xr-x 1 spalak06 spalak06 4096 Aug 20 00:49 .jupyter drwxr-xr-x 1 spalak06 spalak06 4096 Aug 19 04:05 .landscape drwxr-xr-x 1 spalak06 spalak06 4096 Aug 22 09:30 .local drwxr-xr-x 1 spalak06 spalak06 4096 Aug 23 08:48 .m2 -rw-r--r-- 1 spalak06 spalak06 0 Aug 28 12:27 .motd_shown drwxr-xr-x 1 spalak06 spalak06 4096 Aug 20 00:52 .node-gyp drwxr-xr-x 1 spalak06 spalak06 4096 Aug 25 09:03 .npm -rw- 1 spalak06 spalak06 22 Aug 21 22:05 .npmrc -rw-r--r-- 1 spalak06 spalak06 807 Aug 19 04:04 .profile drwxr-xr-x 1 spalak06 spalak06 4096 Aug 23 08:49 .sts4 -rw-r--r-- 1 spalak06 spalak06 0 Aug 19 09:28 .sudo_as_admin_successful drwxr-xr-x 1 spalak06 spalak06 4096 Aug 19 04:12 .vscode-server -rw-r--r-- 1 spalak06 spalak06 218 Aug 21 22:43 .wget-hsts -rw-r--r-- 1 spalak06 spalak06 690850711 May 10 11:35 Anaconda3-2022.05-Linux-x86_64.sh -rw-r--r-- 1 spalak06 spalak06 690850711 May 10 11:35 Anaconda3-2022.05-Linux-x86_64.sh.1 drwxr-xr-x 1 spalak06 spalak06 4096 Aug 25 09:23 anaconda3 drwxr-xr-x 1 spalak06 spalak06 4096 Aug 22 08:38 bin drwxr-xr-x 1 spalak06 spalak06 4096 Aug 28 15:37 csp drwxr-xr-x 1 spalak06 spalak06 4096 Aug 21 22:05 etc drwxr-xr-x 1 spalak06 spalak06 4096 Aug 21 22:05 lib drwxr-xr-x 1 spalak06 spalak06 4096 Aug 28 17:57 saumyafastpages drwxr-xr-x 1 spalak06 spalak06 4096 Aug 25 08:54 vscode . echo &quot;Look for posts&quot; export posts=$project/_posts # _posts inside project cd $posts # this should exist per fastpages pwd # present working directory ls -l # list posts . Look for posts bash: cd: /home/spalak06/csp/sjavaproject/_posts: No such file or directory /home/spalak06 total 1349320 -rw-r--r-- 1 spalak06 spalak06 690850711 May 10 11:35 Anaconda3-2022.05-Linux-x86_64.sh -rw-r--r-- 1 spalak06 spalak06 690850711 May 10 11:35 Anaconda3-2022.05-Linux-x86_64.sh.1 drwxr-xr-x 1 spalak06 spalak06 4096 Aug 25 09:23 anaconda3 drwxr-xr-x 1 spalak06 spalak06 4096 Aug 22 08:38 bin drwxr-xr-x 1 spalak06 spalak06 4096 Aug 28 15:37 csp drwxr-xr-x 1 spalak06 spalak06 4096 Aug 21 22:05 etc drwxr-xr-x 1 spalak06 spalak06 4096 Aug 21 22:05 lib drwxr-xr-x 1 spalak06 spalak06 4096 Aug 28 17:57 saumyafastpages drwxr-xr-x 1 spalak06 spalak06 4096 Aug 25 08:54 vscode . echo &quot;Look for notebooks&quot; export notebooks=$project/_notebooks # _notebooks is inside project cd $notebooks # this should exist per fastpages pwd # present working directory ls -l # list notebooks . Look for notebooks bash: cd: /home/spalak06/csp/sjavaproject/_notebooks: No such file or directory /home/spalak06 total 1349320 -rw-r--r-- 1 spalak06 spalak06 690850711 May 10 11:35 Anaconda3-2022.05-Linux-x86_64.sh -rw-r--r-- 1 spalak06 spalak06 690850711 May 10 11:35 Anaconda3-2022.05-Linux-x86_64.sh.1 drwxr-xr-x 1 spalak06 spalak06 4096 Aug 25 09:23 anaconda3 drwxr-xr-x 1 spalak06 spalak06 4096 Aug 22 08:38 bin drwxr-xr-x 1 spalak06 spalak06 4096 Aug 28 15:37 csp drwxr-xr-x 1 spalak06 spalak06 4096 Aug 21 22:05 etc drwxr-xr-x 1 spalak06 spalak06 4096 Aug 21 22:05 lib drwxr-xr-x 1 spalak06 spalak06 4096 Aug 28 17:57 saumyafastpages drwxr-xr-x 1 spalak06 spalak06 4096 Aug 25 08:54 vscode . echo &quot;Look for images in notebooks, print working directory, list files&quot; cd $notebooks/images # this should exist per fastpages pwd ls -l . Look for images in notebooks, print working directory, list files bash: cd: /home/spalak06/csp/sjavaproject/_notebooks/images: No such file or directory /home/spalak06 total 1349320 -rw-r--r-- 1 spalak06 spalak06 690850711 May 10 11:35 Anaconda3-2022.05-Linux-x86_64.sh -rw-r--r-- 1 spalak06 spalak06 690850711 May 10 11:35 Anaconda3-2022.05-Linux-x86_64.sh.1 drwxr-xr-x 1 spalak06 spalak06 4096 Aug 25 09:23 anaconda3 drwxr-xr-x 1 spalak06 spalak06 4096 Aug 22 08:38 bin drwxr-xr-x 1 spalak06 spalak06 4096 Aug 28 15:37 csp drwxr-xr-x 1 spalak06 spalak06 4096 Aug 21 22:05 etc drwxr-xr-x 1 spalak06 spalak06 4096 Aug 21 22:05 lib drwxr-xr-x 1 spalak06 spalak06 4096 Aug 28 17:57 saumyafastpages drwxr-xr-x 1 spalak06 spalak06 4096 Aug 25 08:54 vscode . look inside markdown files . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project echo &quot;show the contents of README.md&quot; echo &quot;&quot; cat README.md # show contents of file, in this case markdown echo &quot;&quot; echo &quot;end of README.md&quot; . Navigate to project, then navigate to area wwhere files were cloned bash: cd: /home/spalak06/csp/sjavaproject: No such file or directory show the contents of README.md cat: README.md: No such file or directory end of README.md . env, git, and github . key / value concepts | . echo &quot;Show the shell environment variables, key on left of equal value on right&quot; echo &quot;&quot; env cd $project echo &quot;&quot; echo &quot;show the secrets of .git&quot; cd .git ls -l # echo &quot;&quot; # echo &quot;look at config file&quot; # cat _config.yml . Show the shell environment variables, key on left of equal value on right SHELL=/bin/bash PYTHONUNBUFFERED=1 project=/home/spalak06/csp/sjavaproject CONDA_EXE=/home/spalak06/anaconda3/bin/conda _CE_M= WSL_DISTRO_NAME=Ubuntu ELECTRON_RUN_AS_NODE=1 VSCODE_AMD_ENTRYPOINT=vs/workbench/api/node/extensionHostProcess NAME=DESKTOP-2SM2O6U PWD=/home/spalak06 LOGNAME=spalak06 CONDA_PREFIX=/home/spalak06/anaconda3 project_dir=/home/spalak06/csp HOME=/home/spalak06 LANG=C.UTF-8 LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36: CONDA_PROMPT_MODIFIER=(base) PYDEVD_USE_FRAME_EVAL=NO posts=/home/spalak06/csp/sjavaproject/_posts LESSCLOSE=/usr/bin/lesspipe %s %s VSCODE_HANDLES_SIGPIPE=true TERM=xterm-256color _CE_CONDA= LESSOPEN=| /usr/bin/lesspipe %s USER=spalak06 PYTHONIOENCODING=utf-8 notebooks=/home/spalak06/csp/sjavaproject/_notebooks CONDA_SHLVL=1 SHLVL=1 PAGER=cat project_repo=https://github.com/saumyapalk23/saumyafastpages.git VSCODE_CWD=/mnt/c/Users/Saumya/AppData/Local/Programs/Microsoft VS Code CONDA_PYTHON_EXE=/home/spalak06/anaconda3/bin/python PS1=[PEXP [ ]ECT_PROMPT&gt; CONDA_DEFAULT_ENV=base WSLENV=VSCODE_WSL_EXT_LOCATION/up VSCODE_WSL_EXT_LOCATION=/mnt/c/Users/Saumya/.vscode/extensions/ms-vscode-remote.remote-wsl-0.66.3 XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop PATH=/home/spalak06/.vscode-server/bin/e4503b30fc78200f846c62cf8091b76ff5547662/bin/remote-cli:/home/spalak06/.local/bin:/home/spalak06/bin:/home/spalak06/anaconda3/bin:/home/spalak06/anaconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/mnt/c/Program Files (x86)/Common Files/Intel/Shared Libraries/redist/intel64/compiler:/mnt/c/WINDOWS/system32:/mnt/c/WINDOWS:/mnt/c/WINDOWS/System32/Wbem:/mnt/c/WINDOWS/System32/WindowsPowerShell/v1.0:/mnt/c/WINDOWS/System32/OpenSSH:/mnt/c/Program Files (x86)/Intel/Intel(R) Management Engine Components/DAL:/mnt/c/Program Files/Intel/Intel(R) Management Engine Components/DAL:/mnt/c/Program Files/Intel/WiFi/bin:/mnt/c/Program Files/Common Files/Intel/WirelessCommon:/mnt/c/Program Files (x86)/IVI Foundation/VISA/WinNT/Bin:/mnt/c/Program Files/Git/cmd:/mnt/c/Program Files/nodejs:/mnt/c/Users/Saumya/AppData/Local/Microsoft/WindowsApps:/mnt/c/Users/Saumya/AppData/Roaming/npm:/mnt/c/Users/Saumya/AppData/Local/Programs/Microsoft VS Code/bin:/snap/bin VSCODE_NLS_CONFIG={&#34;locale&#34;:&#34;en&#34;,&#34;availableLanguages&#34;:{}} HOSTTYPE=x86_64 VSCODE_HANDLES_UNCAUGHT_ERRORS=true OLDPWD=/home/spalak06/csp VSCODE_IPC_HOOK_CLI=/tmp/vscode-ipc-d16986ec-0f10-4023-ace5-802f43f4288e.sock _=/usr/bin/env bash: cd: /home/spalak06/csp/sjavaproject: No such file or directory show the secrets of .git bash: cd: .git: No such file or directory total 1349320 -rw-r--r-- 1 spalak06 spalak06 690850711 May 10 11:35 Anaconda3-2022.05-Linux-x86_64.sh -rw-r--r-- 1 spalak06 spalak06 690850711 May 10 11:35 Anaconda3-2022.05-Linux-x86_64.sh.1 drwxr-xr-x 1 spalak06 spalak06 4096 Aug 25 09:23 anaconda3 drwxr-xr-x 1 spalak06 spalak06 4096 Aug 22 08:38 bin drwxr-xr-x 1 spalak06 spalak06 4096 Aug 28 15:37 csp drwxr-xr-x 1 spalak06 spalak06 4096 Aug 21 22:05 etc drwxr-xr-x 1 spalak06 spalak06 4096 Aug 21 22:05 lib drwxr-xr-x 1 spalak06 spalak06 4096 Aug 28 17:57 saumyafastpages drwxr-xr-x 1 spalak06 spalak06 4096 Aug 25 08:54 vscode .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2022/08/28/bashh.html",
            "relUrl": "/jupyter/2022/08/28/bashh.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "First post",
            "content": "First Post . Hello, here’s my first post! .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/markdown/2022/08/22/first-post.html",
            "relUrl": "/markdown/2022/08/22/first-post.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://saumyapalk23.github.io/saumyafastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post52": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://saumyapalk23.github.io/saumyafastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post53": {
            "title": "penis pasta (i regret this)",
            "content": ".",
            "url": "https://saumyapalk23.github.io/saumyafastpages/youwontfindthis/penispasta",
            "relUrl": "/youwontfindthis/penispasta",
            "date": " • Dec 7, 2000"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi, I’m Saumya Palakodety, a junior at Del Norte High School!! . .",
          "url": "https://saumyapalk23.github.io/saumyafastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Frontend Changes",
          "content": "| Menu | Calculator | Snake Game | Photo Carousel | . Frontend! .",
          "url": "https://saumyapalk23.github.io/saumyafastpages/frontend12/updates",
          "relUrl": "/frontend12/updates",
          "date": ""
      }
      
  

  

  
      ,"page4": {
          "title": "Notes",
          "content": "College Board . Topic College Board Unit Notes Usage . Unit 1 | Primitives Notes | Primitives Code | . Unit 2 | Objects Notes | Objects Usage | . Code.Org Notes . Unit Notes . Unit 1 - Basics of Objects Oriented Programming | Week 1 | . Unit 1 (Cont.) | Week 2 Vocab | Extra Credit Notes . Unit Notes . Alumni Notes | Alumni Notes 8/23 | . Business Seminar 12/13 | Extra Credit Seminar 12/13 |",
          "url": "https://saumyapalk23.github.io/saumyafastpages/notesandvocab/",
          "relUrl": "/notesandvocab/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  

  
  

  
      ,"page16": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://saumyapalk23.github.io/saumyafastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}